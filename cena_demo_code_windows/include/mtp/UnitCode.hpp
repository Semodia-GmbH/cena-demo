/**
* @file      Units.hpp
* @date      1/17/22
* @createdBy_ichrispa
* @copyright . All_rights_reserved.
*/

#ifndef CONTROLENGINE_NATIVE_UNITS_HPP
#define CONTROLENGINE_NATIVE_UNITS_HPP

#include <cstdint>

namespace semodia::controlengine::native::model::mtp
{
    /**
     * @enum    UnitCode
     * @brief   Contains numerical values for units of measurement as per
     *          PROFIBUS Nutzerorganisation e.V. (PNO); 'Profile for Process Control Devices: Technical Specification for PROFIBUS and PROFINET', Version 4.02, UNITCONSTANT_02 = (std::int16_t) 02,October 2021
     * @details Each unit provides a human-readable definition. The `UNITCONSTANT_1234` (which maps to the number of the same name)
     *          enables code generation given a pure numerical value, though usage in userspace applications is
     *          discouraged in regard to code readility.
     */
    class UnitCode
    {
    private:
        std::int16_t value;

    public:
        enum UnitCodeName : std::int16_t
        {
            DEGREE_KELVIN = (std::int16_t) 1000 /* °K */,                                          UNITCONSTANT_1000 = (std::int16_t) 1000,
            DEGREE_CELSIUS = (std::int16_t) 1001 /* °C */,                                         UNITCONSTANT_1001 = (std::int16_t) 1001,
            DEGREE_FAHRENHEIT = (std::int16_t) 1002 /* °F */,                                      UNITCONSTANT_1002 = (std::int16_t) 1002,
            DEGREE_RANKINE = (std::int16_t) 1003 /* °R */,                                         UNITCONSTANT_1003 = (std::int16_t) 1003,
            RADIAN = (std::int16_t) 1004 /* rad */,                                                UNITCONSTANT_1004 = (std::int16_t) 1004,
            DEGREE = (std::int16_t) 1005 /* ° */,                                                  UNITCONSTANT_1005 = (std::int16_t) 1005,
            ARC_MINUTE = (std::int16_t) 1006 /* ' */,                                              UNITCONSTANT_1006 = (std::int16_t) 1006,
            ARC_SECOND = (std::int16_t) 1007 /* '' */,                                             UNITCONSTANT_1007 = (std::int16_t) 1007,
            GON_OR_GRADE = (std::int16_t) 1008 /* gon */,                                          UNITCONSTANT_1008 = (std::int16_t) 1008,
            REVOLUTION = (std::int16_t) 1009 /* r */,                                              UNITCONSTANT_1009 = (std::int16_t) 1009,
            METER = (std::int16_t) 1010 /* m */,                                                   UNITCONSTANT_1010 = (std::int16_t) 1010,
            KILOMETER = (std::int16_t) 1011 /* km */,                                              UNITCONSTANT_1011 = (std::int16_t) 1011,
            CENTIMETER = (std::int16_t) 1012 /* cm */,                                             UNITCONSTANT_1012 = (std::int16_t) 1012,
            MILLIMETER = (std::int16_t) 1013 /* mm */,                                             UNITCONSTANT_1013 = (std::int16_t) 1013,
            MICROMETER = (std::int16_t) 1014 /* um */,                                             UNITCONSTANT_1014 = (std::int16_t) 1014,
            NANOMETER = (std::int16_t) 1015 /* nm */,                                              UNITCONSTANT_1015 = (std::int16_t) 1015,
            PICOMETER = (std::int16_t) 1016 /* pm */,                                              UNITCONSTANT_1016 = (std::int16_t) 1016,
            ANGSTROM = (std::int16_t) 1017 /* Å */,                                                UNITCONSTANT_1017 = (std::int16_t) 1017,
            FOOT = (std::int16_t) 1018 /* ft */,                                                   UNITCONSTANT_1018 = (std::int16_t) 1018,
            INCH_INTERNATIONAL = (std::int16_t) 1019 /* in */,                                     UNITCONSTANT_1019 = (std::int16_t) 1019,
            YARD = (std::int16_t) 1020 /* yd */,                                                   UNITCONSTANT_1020 = (std::int16_t) 1020,
            MILE = (std::int16_t) 1021 /* mile */,                                                 UNITCONSTANT_1021 = (std::int16_t) 1021,
            NAUTICAL_MILE = (std::int16_t) 1022 /* nautical mile */,                               UNITCONSTANT_1022 = (std::int16_t) 1022,
            SQUARE_METER = (std::int16_t) 1023 /* m 2 */,                                          UNITCONSTANT_1023 = (std::int16_t) 1023,
            SQUARE_KILOMETER = (std::int16_t) 1024 /* km 2 */,                                     UNITCONSTANT_1024 = (std::int16_t) 1024,
            SQUARE_CENTIMETER = (std::int16_t) 1025 /* cm 2 */,                                    UNITCONSTANT_1025 = (std::int16_t) 1025,
            SQUARE_DECIMETER = (std::int16_t) 1026 /* dm2 */,                                      UNITCONSTANT_1026 = (std::int16_t) 1026,
            SQUARE_MILLIMETER = (std::int16_t) 1027 /* mm 2 */,                                    UNITCONSTANT_1027 = (std::int16_t) 1027,
            ARE = (std::int16_t) 1028 /* a */,                                                     UNITCONSTANT_1028 = (std::int16_t) 1028,
            HECTARE = (std::int16_t) 1029 /* ha */,                                                UNITCONSTANT_1029 = (std::int16_t) 1029,
            SQUARE_INCH = (std::int16_t) 1030 /* in 2 */,                                          UNITCONSTANT_1030 = (std::int16_t) 1030,
            SQUARE_FEET = (std::int16_t) 1031 /* ft2 */,                                           UNITCONSTANT_1031 = (std::int16_t) 1031,
            SQUARE_YARD = (std::int16_t) 1032 /* yd 2 */,                                          UNITCONSTANT_1032 = (std::int16_t) 1032,
            SQUARE_MILE = (std::int16_t) 1033 /* mile2 */,                                         UNITCONSTANT_1033 = (std::int16_t) 1033,
            CUBIC_METER = (std::int16_t) 1034 /* m3 */,                                            UNITCONSTANT_1034 = (std::int16_t) 1034,
            CUBIC_DECIMETER = (std::int16_t) 1035 /* dm3 */,                                       UNITCONSTANT_1035 = (std::int16_t) 1035,
            CUBIC_CENTIMETER = (std::int16_t) 1036 /* cm 3 */,                                     UNITCONSTANT_1036 = (std::int16_t) 1036,
            CUBIC_MILLIMETER = (std::int16_t) 1037 /* mm 3 */,                                     UNITCONSTANT_1037 = (std::int16_t) 1037,
            LITER = (std::int16_t) 1038 /* L */,                                                   UNITCONSTANT_1038 = (std::int16_t) 1038,
            CENTILITER = (std::int16_t) 1039 /* cl */,                                             UNITCONSTANT_1039 = (std::int16_t) 1039,
            MILLILITER = (std::int16_t) 1040 /* ml */,                                             UNITCONSTANT_1040 = (std::int16_t) 1040,
            HECTOLITER = (std::int16_t) 1041 /* hl */,                                             UNITCONSTANT_1041 = (std::int16_t) 1041,
            CUBIC_INCH = (std::int16_t) 1042 /* in 3 */,                                           UNITCONSTANT_1042 = (std::int16_t) 1042,
            CUBIC_FOOT = (std::int16_t) 1043 /* ft3 */,                                            UNITCONSTANT_1043 = (std::int16_t) 1043,
            CUBIC_YARD = (std::int16_t) 1044 /* yd 3 */,                                           UNITCONSTANT_1044 = (std::int16_t) 1044,
            CUBIC_MILE = (std::int16_t) 1045 /* mile3 */,                                          UNITCONSTANT_1045 = (std::int16_t) 1045,
            PINT_US_LIQUID = (std::int16_t) 1046 /* pint */,                                       UNITCONSTANT_1046 = (std::int16_t) 1046,
            QUART_US_LIQUID = (std::int16_t) 1047 /* quart */,                                     UNITCONSTANT_1047 = (std::int16_t) 1047,
            GALLON_US = (std::int16_t) 1048 /* gal */,                                             UNITCONSTANT_1048 = (std::int16_t) 1048,
            GALLON_IMPERIAL = (std::int16_t) 1049 /* ImpGal */,                                    UNITCONSTANT_1049 = (std::int16_t) 1049,
            BUSHEL_US_DRY = (std::int16_t) 1050 /* bushel */,                                      UNITCONSTANT_1050 = (std::int16_t) 1050,
            BARREL_US_PETROLEUM = (std::int16_t) 1051 /* bbl */,                                   UNITCONSTANT_1051 = (std::int16_t) 1051,
            BARREL_US_LIQUID = (std::int16_t) 1052 /* bbl (liq) */,                                UNITCONSTANT_1052 = (std::int16_t) 1052,
            STANDARD_CUBIC_FOOT = (std::int16_t) 1053 /* ft3 std. */,                              UNITCONSTANT_1053 = (std::int16_t) 1053,
            SECOND = (std::int16_t) 1054 /* s */,                                                  UNITCONSTANT_1054 = (std::int16_t) 1054,
            KILOSECOND = (std::int16_t) 1055 /* ks */,                                             UNITCONSTANT_1055 = (std::int16_t) 1055,
            MILLISECOND = (std::int16_t) 1056 /* ms */,                                            UNITCONSTANT_1056 = (std::int16_t) 1056,
            MICROSECOND = (std::int16_t) 1057 /* us */,                                            UNITCONSTANT_1057 = (std::int16_t) 1057,
            MINUTE = (std::int16_t) 1058 /* min */,                                                UNITCONSTANT_1058 = (std::int16_t) 1058,
            HOUR = (std::int16_t) 1059 /* hth */,                                                  UNITCONSTANT_1059 = (std::int16_t) 1059,
            DAY = (std::int16_t) 1060 /* d */,                                                     UNITCONSTANT_1060 = (std::int16_t) 1060,
            METER_PER_SECOND = (std::int16_t) 1061 /* m/s */,                                      UNITCONSTANT_1061 = (std::int16_t) 1061,
            MILLIMETER_PER_SECOND = (std::int16_t) 1062 /* mm/s */,                                UNITCONSTANT_1062 = (std::int16_t) 1062,
            METER_PER_HOUR = (std::int16_t) 1063 /* m/h */,                                        UNITCONSTANT_1063 = (std::int16_t) 1063,
            KILOMETER_PER_HOUR = (std::int16_t) 1064 /* km/h */,                                   UNITCONSTANT_1064 = (std::int16_t) 1064,
            NAUTICAL_MILE_PER_HOUR = (std::int16_t) 1065 /* knot */,                               UNITCONSTANT_1065 = (std::int16_t) 1065,
            INCH_PER_SECOND = (std::int16_t) 1066 /* in/s */,                                      UNITCONSTANT_1066 = (std::int16_t) 1066,
            FOOT_PER_SECOND = (std::int16_t) 1067 /* ft/s */,                                      UNITCONSTANT_1067 = (std::int16_t) 1067,
            YARD_PER_SECOND = (std::int16_t) 1068 /* yd/s */,                                      UNITCONSTANT_1068 = (std::int16_t) 1068,
            INCH_PER_MINUTE = (std::int16_t) 1069 /* in/min */,                                    UNITCONSTANT_1069 = (std::int16_t) 1069,
            FOOT_PER_MINUTE = (std::int16_t) 1070 /* ft/min */,                                    UNITCONSTANT_1070 = (std::int16_t) 1070,
            YARD_PER_MINUTE = (std::int16_t) 1071 /* yd/min */,                                    UNITCONSTANT_1071 = (std::int16_t) 1071,
            INCH_PER_HOUR = (std::int16_t) 1072 /* in/h */,                                        UNITCONSTANT_1072 = (std::int16_t) 1072,
            FOOT_PER_HOUR = (std::int16_t) 1073 /* ft/h */,                                        UNITCONSTANT_1073 = (std::int16_t) 1073,
            YARD_PER_HOUR = (std::int16_t) 1074 /* yd/h */,                                        UNITCONSTANT_1074 = (std::int16_t) 1074,
            MILE_PER_HOUR = (std::int16_t) 1075 /* mi/h */,                                        UNITCONSTANT_1075 = (std::int16_t) 1075,
            METER_PER_SECOND_SQUARED = (std::int16_t) 1076 /* m/s 2 */,                            UNITCONSTANT_1076 = (std::int16_t) 1076,
            HERTZ = (std::int16_t) 1077 /* Hz */,                                                  UNITCONSTANT_1077 = (std::int16_t) 1077,
            TERAHERTZ = (std::int16_t) 1078 /* THz */,                                             UNITCONSTANT_1078 = (std::int16_t) 1078,
            GIGAHERTZ = (std::int16_t) 1079 /* GHz */,                                             UNITCONSTANT_1079 = (std::int16_t) 1079,
            MEGAHERTZ = (std::int16_t) 1080 /* MHz */,                                             UNITCONSTANT_1080 = (std::int16_t) 1080,
            KILOHERTZ = (std::int16_t) 1081 /* kHz */,                                             UNITCONSTANT_1081 = (std::int16_t) 1081,
            PER_SECOND = (std::int16_t) 1082 /* 1/s */,                                            UNITCONSTANT_1082 = (std::int16_t) 1082,
            PER_MINUTE = (std::int16_t) 1083 /* 1/min */,                                          UNITCONSTANT_1083 = (std::int16_t) 1083,
            REVOLUTION_PER_SECOND = (std::int16_t) 1084 /* r/s */,                                 UNITCONSTANT_1084 = (std::int16_t) 1084,
            REVOLUTION_PER_MINUTE = (std::int16_t) 1085 /* r/min */,                               UNITCONSTANT_1085 = (std::int16_t) 1085,
            RADIAN_PER_SECOND = (std::int16_t) 1086 /* rpm */,                                     UNITCONSTANT_1086 = (std::int16_t) 1086,
            PER_SECOND_SQUARED = (std::int16_t) 1087 /* rad/s */,                                  UNITCONSTANT_1087 = (std::int16_t) 1087,
            KILOGRAM = (std::int16_t) 1088 /* 1/s2 */,                                             UNITCONSTANT_1088 = (std::int16_t) 1088,
            GRAM = (std::int16_t) 1089 /* kg */,                                                   UNITCONSTANT_1089 = (std::int16_t) 1089,
            MILLIGRAM = (std::int16_t) 1090 /* g */,                                               UNITCONSTANT_1090 = (std::int16_t) 1090,
            MEGAGRAM = (std::int16_t) 1091 /* mg */,                                               UNITCONSTANT_1091 = (std::int16_t) 1091,
            METRIC_TON = (std::int16_t) 1092 /* Mg */,                                             UNITCONSTANT_1092 = (std::int16_t) 1092,
            OUNCE_AVOIRDUPOIS = (std::int16_t) 1093 /* t */,                                       UNITCONSTANT_1093 = (std::int16_t) 1093,
            POUND_AVOIRDUPOIS = (std::int16_t) 1094 /* oz */,                                      UNITCONSTANT_1094 = (std::int16_t) 1094,
            SHORT_TON = (std::int16_t) 1095 /* lb */,                                              UNITCONSTANT_1095 = (std::int16_t) 1095,
            LONG_TON = (std::int16_t) 1096 /* STon */,                                             UNITCONSTANT_1096 = (std::int16_t) 1096,
            KILOGRAM_PER_CUBIC_METER = (std::int16_t) 1097 /* LTon */,                             UNITCONSTANT_1097 = (std::int16_t) 1097,
            MEGAGRAM_PER_CUBIC_METER = (std::int16_t) 1098 /* kg/m3 */,                            UNITCONSTANT_1098 = (std::int16_t) 1098,
            KILOGRAM_PER_CUBIC_DECIMETER = (std::int16_t) 1099 /* Mg/m 3 */,                       UNITCONSTANT_1099 = (std::int16_t) 1099,
            GRAM_PER_CUBIC_CENTIMETER = (std::int16_t) 1100 /* kg/dm 3 */,                         UNITCONSTANT_1100 = (std::int16_t) 1100,
            GRAM_PER_CUBIC_METER = (std::int16_t) 1101 /* g/cm3 */,                                UNITCONSTANT_1101 = (std::int16_t) 1101,
            METRIC_TON_PER_CUBIC_METER = (std::int16_t) 1102 /* g/m3 */,                           UNITCONSTANT_1102 = (std::int16_t) 1102,
            KILOGRAM_PER_LITER = (std::int16_t) 1103 /* t/m3 */,                                   UNITCONSTANT_1103 = (std::int16_t) 1103,
            GRAM_PER_MILLILITER = (std::int16_t) 1104 /* kg/L */,                                  UNITCONSTANT_1104 = (std::int16_t) 1104,
            GRAM_PER_LITER = (std::int16_t) 1105 /* g/ml */,                                       UNITCONSTANT_1105 = (std::int16_t) 1105,
            POUND_PER_CUBIC_INCH = (std::int16_t) 1106 /* g/L */,                                  UNITCONSTANT_1106 = (std::int16_t) 1106,
            POUND_PER_CUBIC_FOOT = (std::int16_t) 1107 /* lb/in 3 */,                              UNITCONSTANT_1107 = (std::int16_t) 1107,
            POUND_PER_GALLON_US = (std::int16_t) 1108 /* lb/ft 3 */,                               UNITCONSTANT_1108 = (std::int16_t) 1108,
            SHORT_TON_PER_CUBIC_YARD = (std::int16_t) 1109 /* lb/gal */,                           UNITCONSTANT_1109 = (std::int16_t) 1109,
            DEGREE_TWADDELL = (std::int16_t) 1110 /* STon/yd3 */,                                  UNITCONSTANT_1110 = (std::int16_t) 1110,
            DEGREE_BAUME_HEAVY = (std::int16_t) 1111 /* °Twad */,                                  UNITCONSTANT_1111 = (std::int16_t) 1111,
            DEGREE_BAUME_LIGHT = (std::int16_t) 1112 /* °Baum hv */,                               UNITCONSTANT_1112 = (std::int16_t) 1112,
            DEGREE_API = (std::int16_t) 1113 /* °Baum°API */,                                      UNITCONSTANT_1113 = (std::int16_t) 1113,
            SPECIFIC_GRAVITY_UNITS = (std::int16_t) 1114 /* SGU */,                                UNITCONSTANT_1114 = (std::int16_t) 1114,
            KILOGRAM_PER_METER = (std::int16_t) 1115 /* kg/m */,                                   UNITCONSTANT_1115 = (std::int16_t) 1115,
            MILLIGRAM_PER_METER = (std::int16_t) 1116 /* mg/m */,                                  UNITCONSTANT_1116 = (std::int16_t) 1116,
            TEX = (std::int16_t) 1117 /* tex */,                                                   UNITCONSTANT_1117 = (std::int16_t) 1117,
            KILOGRAM_SQUARE_METER = (std::int16_t) 1118 /* kg*m 2 */,                              UNITCONSTANT_1118 = (std::int16_t) 1118,
            KILOGRAM_METER_PER_SECOND = (std::int16_t) 1119 /* kg*m/s */,                          UNITCONSTANT_1119 = (std::int16_t) 1119,
            NEWTON = (std::int16_t) 1120 /* N */,                                                  UNITCONSTANT_1120 = (std::int16_t) 1120,
            MEGANEWTON = (std::int16_t) 1121 /* MN */,                                             UNITCONSTANT_1121 = (std::int16_t) 1121,
            KILONEWTON = (std::int16_t) 1122 /* kN */,                                             UNITCONSTANT_1122 = (std::int16_t) 1122,
            MILLINEWTON = (std::int16_t) 1123 /* mN */,                                            UNITCONSTANT_1123 = (std::int16_t) 1123,
            MICRONEWTON = (std::int16_t) 1124 /* uN */,                                            UNITCONSTANT_1124 = (std::int16_t) 1124,
            KILOGRAM_SQUARE_METER_PER_SECOND = (std::int16_t) 1125 /* kg*m 2/s */,                 UNITCONSTANT_1125 = (std::int16_t) 1125,
            NEWTON_METER = (std::int16_t) 1126 /* N*m */,                                          UNITCONSTANT_1126 = (std::int16_t) 1126,
            MEGANEWTON_METER = (std::int16_t) 1127 /* MN*m */,                                     UNITCONSTANT_1127 = (std::int16_t) 1127,
            KILONEWTON_METER = (std::int16_t) 1128 /* kN*m */,                                     UNITCONSTANT_1128 = (std::int16_t) 1128,
            MILLINEWTON_METER = (std::int16_t) 1129 /* mN*m */,                                    UNITCONSTANT_1129 = (std::int16_t) 1129,
            PASCAL = (std::int16_t) 1130 /* Pa */,                                                 UNITCONSTANT_1130 = (std::int16_t) 1130,
            GIGAPASCAL = (std::int16_t) 1131 /* GPa */,                                            UNITCONSTANT_1131 = (std::int16_t) 1131,
            MEGAPASCAL = (std::int16_t) 1132 /* MPa */,                                            UNITCONSTANT_1132 = (std::int16_t) 1132,
            KILOPASCAL = (std::int16_t) 1133 /* kPa */,                                            UNITCONSTANT_1133 = (std::int16_t) 1133,
            MILLIPASCAL = (std::int16_t) 1134 /* mPa */,                                           UNITCONSTANT_1134 = (std::int16_t) 1134,
            MICROPASCAL = (std::int16_t) 1135 /* uPa */,                                           UNITCONSTANT_1135 = (std::int16_t) 1135,
            HECTOPASCAL = (std::int16_t) 1136 /* hPa */,                                           UNITCONSTANT_1136 = (std::int16_t) 1136,
            BAR = (std::int16_t) 1137 /* bar */,                                                   UNITCONSTANT_1137 = (std::int16_t) 1137,
            MILLIBAR = (std::int16_t) 1138 /* mbar */,                                             UNITCONSTANT_1138 = (std::int16_t) 1138,
            TORR = (std::int16_t) 1139 /* torr */,                                                 UNITCONSTANT_1139 = (std::int16_t) 1139,
            ATMOSPHERE = (std::int16_t) 1140 /* atm */,                                            UNITCONSTANT_1140 = (std::int16_t) 1140,
            POUND_FORCE_PER_SQUARE_INCH = (std::int16_t) 1141 /* lbf/in 2 or psi */,               UNITCONSTANT_1141 = (std::int16_t) 1141,
            POUND_FORCE_PER_SQUARE_INCH_ABSOLUTE = (std::int16_t) 1142 /* lbf/in 2a or psia */,    UNITCONSTANT_1142 = (std::int16_t) 1142,
            POUND_FORCE_PER_SQUARE_INCH_GAUGE = (std::int16_t) 1143 /* lbf/in 2g or psig */,       UNITCONSTANT_1143 = (std::int16_t) 1143,
            GRAM_FORCE_PER_SQUARE_CENTIMETER = (std::int16_t) 1144 /* gf/cm 2 */,                  UNITCONSTANT_1144 = (std::int16_t) 1144,
            KILOGRAM_FORCE_PER_SQUARE_CENTIMETER = (std::int16_t) 1145 /* kgf/cm  2 */,            UNITCONSTANT_1145 = (std::int16_t) 1145,
            INCH_OF_WATER = (std::int16_t) 1146 /* inH2 O */,                                      UNITCONSTANT_1146 = (std::int16_t) 1146,
            INCH_OF_WATER_AT_4C = (std::int16_t) 1147 /* inH2 O (4°C) */,                          UNITCONSTANT_1147 = (std::int16_t) 1147,
            INCH_OF_WATER_AT_68F = (std::int16_t) 1148 /* inH2 O (68°F) */,                        UNITCONSTANT_1148 = (std::int16_t) 1148,
            MILLIMETER_OF_WATER = (std::int16_t) 1149 /* mmH2O */,                                 UNITCONSTANT_1149 = (std::int16_t) 1149,
            MILLIMETER_OF_WATER_AT_4C = (std::int16_t) 1150 /* mmH2O (4°C) */,                     UNITCONSTANT_1150 = (std::int16_t) 1150,
            MILLIMETER_OF_WATER_AT_68F = (std::int16_t) 1151 /* mmH2O (68°F) */,                   UNITCONSTANT_1151 = (std::int16_t) 1151,
            FOOT_OF_WATER = (std::int16_t) 1152 /* ftH 2O */,                                      UNITCONSTANT_1152 = (std::int16_t) 1152,
            FOOT_OF_WATER_AT_4C = (std::int16_t) 1153 /* ftH 2O (4°C) */,                          UNITCONSTANT_1153 = (std::int16_t) 1153,
            FOOT_OF_WATER_AT_68F = (std::int16_t) 1154 /* ftH 2O (68°F) */,                        UNITCONSTANT_1154 = (std::int16_t) 1154,
            INCH_OF_MERCURY = (std::int16_t) 1155 /* inHg */,                                      UNITCONSTANT_1155 = (std::int16_t) 1155,
            INCH_OF_MERCURY_AT_0C = (std::int16_t) 1156 /* inHg (0°C) */,                          UNITCONSTANT_1156 = (std::int16_t) 1156,
            MILLIMETER_OF_MERCURY = (std::int16_t) 1157 /* mmHg */,                                UNITCONSTANT_1157 = (std::int16_t) 1157,
            MILLIMETER_OF_MERCURY_AT_0C = (std::int16_t) 1158 /* mmHg (0°C) */,                    UNITCONSTANT_1158 = (std::int16_t) 1158,
            PASCAL_SECOND = (std::int16_t) 1159 /* Pa*s */,                                        UNITCONSTANT_1159 = (std::int16_t) 1159,
            SQUARE_METER_PER_SECOND = (std::int16_t) 1160 /* m 2/s */,                             UNITCONSTANT_1160 = (std::int16_t) 1160,
            POISE = (std::int16_t) 1161 /* P */,                                                   UNITCONSTANT_1161 = (std::int16_t) 1161,
            CENTIPOISE = (std::int16_t) 1162 /* cP */,                                             UNITCONSTANT_1162 = (std::int16_t) 1162,
            STOKES = (std::int16_t) 1163 /* St */,                                                 UNITCONSTANT_1163 = (std::int16_t) 1163,
            CENTISTOKES = (std::int16_t) 1164 /* cSt */,                                           UNITCONSTANT_1164 = (std::int16_t) 1164,
            NEWTON_PER_METER = (std::int16_t) 1165 /* N/m */,                                      UNITCONSTANT_1165 = (std::int16_t) 1165,
            MILLINEWTON_PER_METER = (std::int16_t) 1166 /* mN/m */,                                UNITCONSTANT_1166 = (std::int16_t) 1166,
            JOULE = (std::int16_t) 1167 /* J */,                                                   UNITCONSTANT_1167 = (std::int16_t) 1167,
            EXAJOULES = (std::int16_t) 1168 /* EJ */,                                              UNITCONSTANT_1168 = (std::int16_t) 1168,
            PETAJOULES = (std::int16_t) 1169 /* PJ */,                                             UNITCONSTANT_1169 = (std::int16_t) 1169,
            TERAJOULES = (std::int16_t) 1170 /* TJ */,                                             UNITCONSTANT_1170 = (std::int16_t) 1170,
            GIGAJOULES = (std::int16_t) 1171 /* GJ */,                                             UNITCONSTANT_1171 = (std::int16_t) 1171,
            MEGAJOULES = (std::int16_t) 1172 /* MJ */,                                             UNITCONSTANT_1172 = (std::int16_t) 1172,
            KILOJOULES = (std::int16_t) 1173 /* kJ */,                                             UNITCONSTANT_1173 = (std::int16_t) 1173,
            MILLIJOULES = (std::int16_t) 1174 /* mJ */,                                            UNITCONSTANT_1174 = (std::int16_t) 1174,
            WATT_HOUR = (std::int16_t) 1175 /* W*h */,                                             UNITCONSTANT_1175 = (std::int16_t) 1175,
            TERAWATT_HOUR = (std::int16_t) 1176 /* TW*h */,                                        UNITCONSTANT_1176 = (std::int16_t) 1176,
            GIGAWATT_HOUR = (std::int16_t) 1177 /* GW*h */,                                        UNITCONSTANT_1177 = (std::int16_t) 1177,
            MEGAWATT_HOUR = (std::int16_t) 1178 /* MW*h */,                                        UNITCONSTANT_1178 = (std::int16_t) 1178,
            KILOWATT_HOUR = (std::int16_t) 1179 /* kW*h */,                                        UNITCONSTANT_1179 = (std::int16_t) 1179,
            CALORIE_THERMOCHEMICAL = (std::int16_t) 1180 /* cal th */,                             UNITCONSTANT_1180 = (std::int16_t) 1180,
            KILOCALORIE_THERMOCHEMICAL = (std::int16_t) 1181 /* kcal th */,                        UNITCONSTANT_1181 = (std::int16_t) 1181,
            MEGACALORIE_THERMOCHEMICAL = (std::int16_t) 1182 /* Mcal th */,                        UNITCONSTANT_1182 = (std::int16_t) 1182,
            BRITISH_THERMAL_UNIT_THERMOCHEMICAL = (std::int16_t) 1183 /* Btuth */,                 UNITCONSTANT_1183 = (std::int16_t) 1183,
            DEKATHERM = (std::int16_t) 1184 /* datherm */,                                         UNITCONSTANT_1184 = (std::int16_t) 1184,
            FOOT_POUND_FORCE = (std::int16_t) 1185 /* ft*lbf */,                                   UNITCONSTANT_1185 = (std::int16_t) 1185,
            WATT = (std::int16_t) 1186 /* W */,                                                    UNITCONSTANT_1186 = (std::int16_t) 1186,
            TERAWATT = (std::int16_t) 1187 /* TW */,                                               UNITCONSTANT_1187 = (std::int16_t) 1187,
            GIGAWATT = (std::int16_t) 1188 /* GW */,                                               UNITCONSTANT_1188 = (std::int16_t) 1188,
            MEGAWATT = (std::int16_t) 1189 /* MW */,                                               UNITCONSTANT_1189 = (std::int16_t) 1189,
            KILOWATT = (std::int16_t) 1190 /* kW */,                                               UNITCONSTANT_1190 = (std::int16_t) 1190,
            MILLIWATT = (std::int16_t) 1191 /* mW */,                                              UNITCONSTANT_1191 = (std::int16_t) 1191,
            MICROWATT = (std::int16_t) 1192 /* uW */,                                              UNITCONSTANT_1192 = (std::int16_t) 1192,
            NANOWATT = (std::int16_t) 1193 /* nW */,                                               UNITCONSTANT_1193 = (std::int16_t) 1193,
            PICOWATT = (std::int16_t) 1194 /* pW */,                                               UNITCONSTANT_1194 = (std::int16_t) 1194,
            MEGACALORIE_PER_HOUR = (std::int16_t) 1195 /* Mcal th/h */,                            UNITCONSTANT_1195 = (std::int16_t) 1195,
            MEGAJOULE_PER_HOUR = (std::int16_t) 1196 /* MJ/h */,                                   UNITCONSTANT_1196 = (std::int16_t) 1196,
            BRITISH_THERMAL_UNIT_PER_HOUR = (std::int16_t) 1197 /* Btuth/h */,                     UNITCONSTANT_1197 = (std::int16_t) 1197,
            HORSEPOWER_ELECTRIC = (std::int16_t) 1198 /* hp */,                                    UNITCONSTANT_1198 = (std::int16_t) 1198,
            WATT_PER_METER_KELVIN = (std::int16_t) 1199 /* W/(m*K) */,                             UNITCONSTANT_1199 = (std::int16_t) 1199,
            WATT_PER_SQUARE_METER_KELVIN = (std::int16_t) 1200 /* W/(m 2*K) */,                    UNITCONSTANT_1200 = (std::int16_t) 1200,
            SQUARE_METER_KELVIN_PER_WATT = (std::int16_t) 1201 /* m 2*K/W */,                      UNITCONSTANT_1201 = (std::int16_t) 1201,
            JOULE_PER_KELVIN = (std::int16_t) 1202 /* J/K */,                                      UNITCONSTANT_1202 = (std::int16_t) 1202,
            KILOJOULE_PER_KELVIN = (std::int16_t) 1203 /* kJ/K */,                                 UNITCONSTANT_1203 = (std::int16_t) 1203,
            JOULE_PER_KILOGRAM_KELVIN = (std::int16_t) 1204 /* J/(kg*K) */,                        UNITCONSTANT_1204 = (std::int16_t) 1204,
            KILOJOULE_PER_KILOGRAM_KELVIN = (std::int16_t) 1205 /* kJ/(kg*K) */,                   UNITCONSTANT_1205 = (std::int16_t) 1205,
            JOULE_PER_KILOGRAM = (std::int16_t) 1206 /* J/kg */,                                   UNITCONSTANT_1206 = (std::int16_t) 1206,
            MEGAJOULE_PER_KILOGRAM = (std::int16_t) 1207 /* MJ/kg */,                              UNITCONSTANT_1207 = (std::int16_t) 1207,
            KILOJOULE_PER_KILOGRAM = (std::int16_t) 1208 /* kJ/kg */,                              UNITCONSTANT_1208 = (std::int16_t) 1208,
            AMPERE = (std::int16_t) 1209 /* A */,                                                  UNITCONSTANT_1209 = (std::int16_t) 1209,
            KILOAMPERE = (std::int16_t) 1210 /* kA */,                                             UNITCONSTANT_1210 = (std::int16_t) 1210,
            MILLIAMPERE = (std::int16_t) 1211 /* mA */,                                            UNITCONSTANT_1211 = (std::int16_t) 1211,
            MICROAMPERE = (std::int16_t) 1212 /* uA */,                                            UNITCONSTANT_1212 = (std::int16_t) 1212,
            NANOAMPERE = (std::int16_t) 1213 /* nA */,                                             UNITCONSTANT_1213 = (std::int16_t) 1213,
            PICOAMPERE = (std::int16_t) 1214 /* pA */,                                             UNITCONSTANT_1214 = (std::int16_t) 1214,
            COULOMB = (std::int16_t) 1215 /* C */,                                                 UNITCONSTANT_1215 = (std::int16_t) 1215,
            MEGACOULOMB = (std::int16_t) 1216 /* MC */,                                            UNITCONSTANT_1216 = (std::int16_t) 1216,
            KILOCOULOMB = (std::int16_t) 1217 /* kC */,                                            UNITCONSTANT_1217 = (std::int16_t) 1217,
            MICROCOULOMB = (std::int16_t) 1218 /* uC */,                                           UNITCONSTANT_1218 = (std::int16_t) 1218,
            NANOCOULOMB = (std::int16_t) 1219 /* nC */,                                            UNITCONSTANT_1219 = (std::int16_t) 1219,
            PICOCOULOMB = (std::int16_t) 1220 /* pC */,                                            UNITCONSTANT_1220 = (std::int16_t) 1220,
            AMPERE_HOUR = (std::int16_t) 1221 /* A*h */,                                           UNITCONSTANT_1221 = (std::int16_t) 1221,
            COULOMB_PER_CUBIC_METER = (std::int16_t) 1222 /* C/m 3 */,                             UNITCONSTANT_1222 = (std::int16_t) 1222,
            COULOMB_PER_CUBIC_MILLIMETER = (std::int16_t) 1223 /* C/mm 3 */,                       UNITCONSTANT_1223 = (std::int16_t) 1223,
            COULOMB_PER_CUBIC_CENTIMETER = (std::int16_t) 1224 /* C/cm3 */,                        UNITCONSTANT_1224 = (std::int16_t) 1224,
            KILOCOULOMB_PER_CUBIC_METER = (std::int16_t) 1225 /* kC/m3 */,                         UNITCONSTANT_1225 = (std::int16_t) 1225,
            MILLICOULOMB_PER_CUBIC_METER = (std::int16_t) 1226 /* mC/m 3 */,                       UNITCONSTANT_1226 = (std::int16_t) 1226,
            MICROCOULOMB_PER_CUBIC_METER = (std::int16_t) 1227 /* uC/m 3 */,                       UNITCONSTANT_1227 = (std::int16_t) 1227,
            COULOMB_PER_SQUARE_METER = (std::int16_t) 1228 /* C/m 2 */,                            UNITCONSTANT_1228 = (std::int16_t) 1228,
            COULOMB_PER_SQUARE_MILLIMETER = (std::int16_t) 1229 /* C/mm 2 */,                      UNITCONSTANT_1229 = (std::int16_t) 1229,
            COULOMB_PER_SQUARE_CENTIMETER = (std::int16_t) 1230 /* C/cm2 */,                       UNITCONSTANT_1230 = (std::int16_t) 1230,
            KILOCOULOMB_PER_SQUARE_METER = (std::int16_t) 1231 /* kC/m2 */,                        UNITCONSTANT_1231 = (std::int16_t) 1231,
            MILLICOULOMB_PER_SQUARE_METER = (std::int16_t) 1232 /* mC/m 2 */,                      UNITCONSTANT_1232 = (std::int16_t) 1232,
            MICROCOULOMB_PER_SQUARE_METER = (std::int16_t) 1233 /* uC/m 2 */,                      UNITCONSTANT_1233 = (std::int16_t) 1233,
            VOLT_PER_METER = (std::int16_t) 1234 /* V/m */,                                        UNITCONSTANT_1234 = (std::int16_t) 1234,
            MEGAVOLT_PER_METER = (std::int16_t) 1235 /* MV/m */,                                   UNITCONSTANT_1235 = (std::int16_t) 1235,
            KILOVOLT_PER_METER = (std::int16_t) 1236 /* kV/m */,                                   UNITCONSTANT_1236 = (std::int16_t) 1236,
            VOLT_PER_CENTIMETER = (std::int16_t) 1237 /* V/cm */,                                  UNITCONSTANT_1237 = (std::int16_t) 1237,
            MILLIVOLT_PER_METER = (std::int16_t) 1238 /* mV/m */,                                  UNITCONSTANT_1238 = (std::int16_t) 1238,
            MICROVOLT_PER_METER = (std::int16_t) 1239 /* uV/m */,                                  UNITCONSTANT_1239 = (std::int16_t) 1239,
            VOLT = (std::int16_t) 1240 /* V */,                                                    UNITCONSTANT_1240 = (std::int16_t) 1240,
            MEGAVOLT = (std::int16_t) 1241 /* MV */,                                               UNITCONSTANT_1241 = (std::int16_t) 1241,
            KILOVOLT = (std::int16_t) 1242 /* kV */,                                               UNITCONSTANT_1242 = (std::int16_t) 1242,
            MILLIVOLT = (std::int16_t) 1243 /* mV */,                                              UNITCONSTANT_1243 = (std::int16_t) 1243,
            MICROVOLT = (std::int16_t) 1244 /* uV */,                                              UNITCONSTANT_1244 = (std::int16_t) 1244,
            FARAD = (std::int16_t) 1245 /* F */,                                                   UNITCONSTANT_1245 = (std::int16_t) 1245,
            MILLIFARAD = (std::int16_t) 1246 /* mF */,                                             UNITCONSTANT_1246 = (std::int16_t) 1246,
            MICROFARAD = (std::int16_t) 1247 /* uF */,                                             UNITCONSTANT_1247 = (std::int16_t) 1247,
            NANOFARAD = (std::int16_t) 1248 /* nF */,                                              UNITCONSTANT_1248 = (std::int16_t) 1248,
            PICOFARAD = (std::int16_t) 1249 /* pF */,                                              UNITCONSTANT_1249 = (std::int16_t) 1249,
            FARAD_PER_METER = (std::int16_t) 1250 /* F/m */,                                       UNITCONSTANT_1250 = (std::int16_t) 1250,
            MICROFARAD_PER_METER = (std::int16_t) 1251 /* gF/m */,                                 UNITCONSTANT_1251 = (std::int16_t) 1251,
            NANOFARAD_PER_METER = (std::int16_t) 1252 /* nF/m */,                                  UNITCONSTANT_1252 = (std::int16_t) 1252,
            PICOFARAD_PER_METER = (std::int16_t) 1253 /* pF/m */,                                  UNITCONSTANT_1253 = (std::int16_t) 1253,
            COULOMB_METER = (std::int16_t) 1254 /* C*m */,                                         UNITCONSTANT_1254 = (std::int16_t) 1254,
            AMPERE_PER_SQUARE_METER = (std::int16_t) 1255 /* A/m2 */,                              UNITCONSTANT_1255 = (std::int16_t) 1255,
            MEGAAMPERE_PER_SQUARE_METER = (std::int16_t) 1256 /* MA/m2 */,                         UNITCONSTANT_1256 = (std::int16_t) 1256,
            AMPERE_PER_SQUARE_CENTIMETER = (std::int16_t) 1257 /* A/cm 2 */,                       UNITCONSTANT_1257 = (std::int16_t) 1257,
            KILOAMPERE_PER_SQUARE_METER = (std::int16_t) 1258 /* kA/m 2 */,                        UNITCONSTANT_1258 = (std::int16_t) 1258,
            AMPERE_PER_METER = (std::int16_t) 1259 /* A/m */,                                      UNITCONSTANT_1259 = (std::int16_t) 1259,
            KILOAMPERE_PER_METER = (std::int16_t) 1260 /* kA/m */,                                 UNITCONSTANT_1260 = (std::int16_t) 1260,
            AMPERE_PER_CENTIMETER = (std::int16_t) 1261 /* A/cm */,                                UNITCONSTANT_1261 = (std::int16_t) 1261,
            TESLA = (std::int16_t) 1262 /* T */,                                                   UNITCONSTANT_1262 = (std::int16_t) 1262,
            MILLITESLA = (std::int16_t) 1263 /* mT */,                                             UNITCONSTANT_1263 = (std::int16_t) 1263,
            MICROTESLA = (std::int16_t) 1264 /* uT */,                                             UNITCONSTANT_1264 = (std::int16_t) 1264,
            NANOTESLA = (std::int16_t) 1265 /* nT */,                                              UNITCONSTANT_1265 = (std::int16_t) 1265,
            WEBER = (std::int16_t) 1266 /* Wb */,                                                  UNITCONSTANT_1266 = (std::int16_t) 1266,
            MILLIWEBER = (std::int16_t) 1267 /* mWb */,                                            UNITCONSTANT_1267 = (std::int16_t) 1267,
            WEBER_PER_METER = (std::int16_t) 1268 /* Wb/m */,                                      UNITCONSTANT_1268 = (std::int16_t) 1268,
            KILOWEBER_PER_METER = (std::int16_t) 1269 /* kWb/m */,                                 UNITCONSTANT_1269 = (std::int16_t) 1269,
            HENRY = (std::int16_t) 1270 /* H */,                                                   UNITCONSTANT_1270 = (std::int16_t) 1270,
            MILLIHENRY = (std::int16_t) 1271 /* mH */,                                             UNITCONSTANT_1271 = (std::int16_t) 1271,
            MICROHENRY = (std::int16_t) 1272 /* uH */,                                             UNITCONSTANT_1272 = (std::int16_t) 1272,
            NANOHENRY = (std::int16_t) 1273 /* nH */,                                              UNITCONSTANT_1273 = (std::int16_t) 1273,
            PICOHENRY = (std::int16_t) 1274 /* pH */,                                              UNITCONSTANT_1274 = (std::int16_t) 1274,
            HENRY_PER_METER = (std::int16_t) 1275 /* H/m */,                                       UNITCONSTANT_1275 = (std::int16_t) 1275,
            MICROHENRY_PER_METER = (std::int16_t) 1276 /* uH/m */,                                 UNITCONSTANT_1276 = (std::int16_t) 1276,
            NANOHENRY_PER_METER = (std::int16_t) 1277 /* nH/m */,                                  UNITCONSTANT_1277 = (std::int16_t) 1277,
            AMPERE_SQUARE_METER = (std::int16_t) 1278 /* A*m 2 */,                                 UNITCONSTANT_1278 = (std::int16_t) 1278,
            NEWTON_SQUARE_METER_PER_AMPERE = (std::int16_t) 1279 /* N*m2 /A */,                    UNITCONSTANT_1279 = (std::int16_t) 1279,
            WEBER_METER = (std::int16_t) 1280 /* Wb*m */,                                          UNITCONSTANT_1280 = (std::int16_t) 1280,
            OHM = (std::int16_t) 1281 /* Ohm */,                                                   UNITCONSTANT_1281 = (std::int16_t) 1281,
            GIGAOHM = (std::int16_t) 1282 /* GOhm */,                                              UNITCONSTANT_1282 = (std::int16_t) 1282,
            MEGOHM = (std::int16_t) 1283 /* MOhm */,                                               UNITCONSTANT_1283 = (std::int16_t) 1283,
            KILOHM = (std::int16_t) 1284 /* kOhm */,                                               UNITCONSTANT_1284 = (std::int16_t) 1284,
            MILLIOHM = (std::int16_t) 1285 /* mOhm */,                                             UNITCONSTANT_1285 = (std::int16_t) 1285,
            MICROOHM = (std::int16_t) 1286 /* uOhm */,                                             UNITCONSTANT_1286 = (std::int16_t) 1286,
            SIEMENS = (std::int16_t) 1287 /* S */,                                                 UNITCONSTANT_1287 = (std::int16_t) 1287,
            KILOSIEMENS = (std::int16_t) 1288 /* kS */,                                            UNITCONSTANT_1288 = (std::int16_t) 1288,
            MILLISIEMENS = (std::int16_t) 1289 /* mS */,                                           UNITCONSTANT_1289 = (std::int16_t) 1289,
            MICROSIEMENS = (std::int16_t) 1290 /* uS */,                                           UNITCONSTANT_1290 = (std::int16_t) 1290,
            OHM_METER = (std::int16_t) 1291 /* Ohm*m */,                                           UNITCONSTANT_1291 = (std::int16_t) 1291,
            GIGAOHM_METER = (std::int16_t) 1292 /* GOhm*m */,                                      UNITCONSTANT_1292 = (std::int16_t) 1292,
            MEGOHM_METER = (std::int16_t) 1293 /* MOhm*m */,                                       UNITCONSTANT_1293 = (std::int16_t) 1293,
            KILOHM_METER = (std::int16_t) 1294 /* kOhm*m */,                                       UNITCONSTANT_1294 = (std::int16_t) 1294,
            OHM_CENTIMETER = (std::int16_t) 1295 /* Ohm*cm */,                                     UNITCONSTANT_1295 = (std::int16_t) 1295,
            MILLIOHM_METER = (std::int16_t) 1296 /* mOhm*m */,                                     UNITCONSTANT_1296 = (std::int16_t) 1296,
            MICROOHM_METER = (std::int16_t) 1297 /* uOhm*m */,                                     UNITCONSTANT_1297 = (std::int16_t) 1297,
            NANOOHM_METER = (std::int16_t) 1298 /* nOhm*m */,                                      UNITCONSTANT_1298 = (std::int16_t) 1298,
            SIEMENS_PER_METER = (std::int16_t) 1299 /* S/m */,                                     UNITCONSTANT_1299 = (std::int16_t) 1299,
            MEGASIEMENS_PER_METER = (std::int16_t) 1300 /* MS/m */,                                UNITCONSTANT_1300 = (std::int16_t) 1300,
            KILOSIEMENS_PER_METER = (std::int16_t) 1301 /* kS/m */,                                UNITCONSTANT_1301 = (std::int16_t) 1301,
            MILLISIEMENS_PER_CENTIMETER = (std::int16_t) 1302 /* mS/cm */,                         UNITCONSTANT_1302 = (std::int16_t) 1302,
            MICROSIEMENS_PER_MILLIMETER = (std::int16_t) 1303 /* uS/mm */,                         UNITCONSTANT_1303 = (std::int16_t) 1303,
            PER_HENRY = (std::int16_t) 1304 /* 1/H */,                                             UNITCONSTANT_1304 = (std::int16_t) 1304,
            STERADIAN = (std::int16_t) 1305 /* sr */,                                              UNITCONSTANT_1305 = (std::int16_t) 1305,
            WATT_PER_STERADIAN = (std::int16_t) 1306 /* W/sr */,                                   UNITCONSTANT_1306 = (std::int16_t) 1306,
            WATT_PER_STERADIAN_SQUARE_METER = (std::int16_t) 1307 /* W/(sr*m2 ) */,                UNITCONSTANT_1307 = (std::int16_t) 1307,
            WATT_PER_SQUARE_METER = (std::int16_t) 1308 /* W/m2 */,                                UNITCONSTANT_1308 = (std::int16_t) 1308,
            LUMEN = (std::int16_t) 1309 /* lm */,                                                  UNITCONSTANT_1309 = (std::int16_t) 1309,
            LUMEN_SECOND = (std::int16_t) 1310 /* lm*s */,                                         UNITCONSTANT_1310 = (std::int16_t) 1310,
            LUMEN_HOUR = (std::int16_t) 1311 /* lm*h */,                                           UNITCONSTANT_1311 = (std::int16_t) 1311,
            LUMEN_PER_SQUARE_METER = (std::int16_t) 1312 /* lm/m2 */,                              UNITCONSTANT_1312 = (std::int16_t) 1312,
            LUMEN_PER_WATT = (std::int16_t) 1313 /* lm/W */,                                       UNITCONSTANT_1313 = (std::int16_t) 1313,
            LUX = (std::int16_t) 1314 /* lx */,                                                    UNITCONSTANT_1314 = (std::int16_t) 1314,
            LUX_SECOND = (std::int16_t) 1315 /* lx*s */,                                           UNITCONSTANT_1315 = (std::int16_t) 1315,
            CANDELA = (std::int16_t) 1316 /* cd */,                                                UNITCONSTANT_1316 = (std::int16_t) 1316,
            CANDELA_PER_SQUARE_METER = (std::int16_t) 1317 /* cd/m2 */,                            UNITCONSTANT_1317 = (std::int16_t) 1317,
            GRAM_PER_SECOND = (std::int16_t) 1318 /* g/s */,                                       UNITCONSTANT_1318 = (std::int16_t) 1318,
            GRAM_PER_MINUTE = (std::int16_t) 1319 /* g/min */,                                     UNITCONSTANT_1319 = (std::int16_t) 1319,
            GRAM_PER_HOUR = (std::int16_t) 1320 /* g/h */,                                         UNITCONSTANT_1320 = (std::int16_t) 1320,
            GRAM_PER_DAY = (std::int16_t) 1321 /* g/d */,                                          UNITCONSTANT_1321 = (std::int16_t) 1321,
            KILOGRAM_PER_SECOND = (std::int16_t) 1322 /* kg/s */,                                  UNITCONSTANT_1322 = (std::int16_t) 1322,
            KILOGRAM_PER_MINUTE = (std::int16_t) 1323 /* kg/min */,                                UNITCONSTANT_1323 = (std::int16_t) 1323,
            KILOGRAM_PER_HOUR = (std::int16_t) 1324 /* kg/h */,                                    UNITCONSTANT_1324 = (std::int16_t) 1324,
            KILOGRAM_PER_DAY = (std::int16_t) 1325 /* kg/d */,                                     UNITCONSTANT_1325 = (std::int16_t) 1325,
            METRIC_TON_PER_SECOND = (std::int16_t) 1326 /* t/s */,                                 UNITCONSTANT_1326 = (std::int16_t) 1326,
            METRIC_TON_PER_MINUTE = (std::int16_t) 1327 /* t/min */,                               UNITCONSTANT_1327 = (std::int16_t) 1327,
            METRIC_TON_PER_HOUR = (std::int16_t) 1328 /* t/h */,                                   UNITCONSTANT_1328 = (std::int16_t) 1328,
            METRIC_TON_PER_DAY = (std::int16_t) 1329 /* t/d */,                                    UNITCONSTANT_1329 = (std::int16_t) 1329,
            POUND_PER_SECOND = (std::int16_t) 1330 /* lb/s */,                                     UNITCONSTANT_1330 = (std::int16_t) 1330,
            POUND_PER_MINUTE = (std::int16_t) 1331 /* lb/min */,                                   UNITCONSTANT_1331 = (std::int16_t) 1331,
            POUND_PER_HOUR = (std::int16_t) 1332 /* lb/h */,                                       UNITCONSTANT_1332 = (std::int16_t) 1332,
            POUND_PER_DAY = (std::int16_t) 1333 /* lb/d */,                                        UNITCONSTANT_1333 = (std::int16_t) 1333,
            SHORT_TON_PER_SECOND = (std::int16_t) 1334 /* STon/s */,                               UNITCONSTANT_1334 = (std::int16_t) 1334,
            SHORT_TON_PER_MINUTE = (std::int16_t) 1335 /* STon/min */,                             UNITCONSTANT_1335 = (std::int16_t) 1335,
            SHORT_TON_PER_HOUR = (std::int16_t) 1336 /* STon/h */,                                 UNITCONSTANT_1336 = (std::int16_t) 1336,
            SHORT_TON_PER_DAY = (std::int16_t) 1337 /* STon/d */,                                  UNITCONSTANT_1337 = (std::int16_t) 1337,
            LONG_TON_PER_SECOND = (std::int16_t) 1338 /* LTon/s */,                                UNITCONSTANT_1338 = (std::int16_t) 1338,
            LONG_TON_PER_MINUTE = (std::int16_t) 1339 /* LTon/min */,                              UNITCONSTANT_1339 = (std::int16_t) 1339,
            LONG_TON_PER_HOUR = (std::int16_t) 1340 /* LTon/h */,                                  UNITCONSTANT_1340 = (std::int16_t) 1340,
            LONG_TON_PER_DAY = (std::int16_t) 1341 /* LTon/d */,                                   UNITCONSTANT_1341 = (std::int16_t) 1341,
            PERCENT = (std::int16_t) 1342 /* % */,                                                 UNITCONSTANT_1342 = (std::int16_t) 1342,
            PERCENT_SOLID_PER_WEIGHT = (std::int16_t) 1343 /* % sol/wt */,                         UNITCONSTANT_1343 = (std::int16_t) 1343,
            PERCENT_SOLID_PER_VOLUME = (std::int16_t) 1344 /* % sol/vol */,                        UNITCONSTANT_1344 = (std::int16_t) 1344,
            PERCENT_STEAM_QUALITY = (std::int16_t) 1345 /* % stm qual */,                          UNITCONSTANT_1345 = (std::int16_t) 1345,
            DEGREE_PLATO = (std::int16_t) 1346 /* °Plato */,                                       UNITCONSTANT_1346 = (std::int16_t) 1346,
            CUBIC_METER_PER_SECOND = (std::int16_t) 1347 /* m 3/s */,                              UNITCONSTANT_1347 = (std::int16_t) 1347,
            CUBIC_METER_PER_MINUTE = (std::int16_t) 1348 /* m 3/min */,                            UNITCONSTANT_1348 = (std::int16_t) 1348,
            CUBIC_METER_PER_HOUR = (std::int16_t) 1349 /* m 3/h */,                                UNITCONSTANT_1349 = (std::int16_t) 1349,
            CUBIC_METER_PER_DAY = (std::int16_t) 1350 /* m 3/d */,                                 UNITCONSTANT_1350 = (std::int16_t) 1350,
            LITER_PER_SECOND = (std::int16_t) 1351 /* L/s */,                                      UNITCONSTANT_1351 = (std::int16_t) 1351,
            LITER_PER_MINUTE = (std::int16_t) 1352 /* L/min */,                                    UNITCONSTANT_1352 = (std::int16_t) 1352,
            LITER_PER_HOUR = (std::int16_t) 1353 /* L/h */,                                        UNITCONSTANT_1353 = (std::int16_t) 1353,
            LITER_PER_DAY = (std::int16_t) 1354 /* L/d */,                                         UNITCONSTANT_1354 = (std::int16_t) 1354,
            MEGALITER_PER_DAY = (std::int16_t) 1355 /* ML/d */,                                    UNITCONSTANT_1355 = (std::int16_t) 1355,
            CUBIC_FOOT_PER_SECOND = (std::int16_t) 1356 /* ft3 /s */,                              UNITCONSTANT_1356 = (std::int16_t) 1356,
            CUBIC_FOOT_PER_MINUTE = (std::int16_t) 1357 /* ft3 /min */,                            UNITCONSTANT_1357 = (std::int16_t) 1357,
            CUBIC_FOOT_PER_HOUR = (std::int16_t) 1358 /* ft3 /h */,                                UNITCONSTANT_1358 = (std::int16_t) 1358,
            CUBIC_FOOT_PER_DAY = (std::int16_t) 1359 /* ft3 /d */,                                 UNITCONSTANT_1359 = (std::int16_t) 1359,
            STANDARD_CUBIC_FOOT_PER_MINUTE = (std::int16_t) 1360 /* ft3 /min std. */,              UNITCONSTANT_1360 = (std::int16_t) 1360,
            STANDARD_CUBIC_FOOT_PER_HOUR = (std::int16_t) 1361 /* ft3 /h std. */,                  UNITCONSTANT_1361 = (std::int16_t) 1361,
            GALLON_US_PER_SECOND = (std::int16_t) 1362 /* gal/s */,                                UNITCONSTANT_1362 = (std::int16_t) 1362,
            GALLON_US_PER_MINUTE = (std::int16_t) 1363 /* gal/min */,                              UNITCONSTANT_1363 = (std::int16_t) 1363,
            GALLON_US_PER_HOUR = (std::int16_t) 1364 /* gal/h */,                                  UNITCONSTANT_1364 = (std::int16_t) 1364,
            GALLON_US_PER_DAY = (std::int16_t) 1365 /* gal/d */,                                   UNITCONSTANT_1365 = (std::int16_t) 1365,
            MEGAGALLON_US_PER_DAY = (std::int16_t) 1366 /* Mgal/d */,                              UNITCONSTANT_1366 = (std::int16_t) 1366,
            GALLON_IMPERIAL_PER_SECOND = (std::int16_t) 1367 /* ImpGal/s */,                       UNITCONSTANT_1367 = (std::int16_t) 1367,
            GALLON_IMPERIAL_PER_MINUTE = (std::int16_t) 1368 /* ImpGal/min */,                     UNITCONSTANT_1368 = (std::int16_t) 1368,
            GALLON_IMPERIAL_PER_HOUR = (std::int16_t) 1369 /* ImpGal/h */,                         UNITCONSTANT_1369 = (std::int16_t) 1369,
            GALLON_IMPERIAL_PER_DAY = (std::int16_t) 1370 /* ImpGal/d */,                          UNITCONSTANT_1370 = (std::int16_t) 1370,
            BARREL_PER_SECOND = (std::int16_t) 1371 /* bbl/s */,                                   UNITCONSTANT_1371 = (std::int16_t) 1371,
            BARREL_PER_MINUTE = (std::int16_t) 1372 /* bbl/min */,                                 UNITCONSTANT_1372 = (std::int16_t) 1372,
            BARREL_PER_HOUR = (std::int16_t) 1373 /* bbl/h */,                                     UNITCONSTANT_1373 = (std::int16_t) 1373,
            BARREL_PER_DAY = (std::int16_t) 1374 /* bbl/d */,                                      UNITCONSTANT_1374 = (std::int16_t) 1374,

            // Duplicate of 1308
            // WATT_PER_SQUARE_METER                             = (std::int16_t) 1375 /* W/m2 */, UNITCONSTANT_1375 = (std::int16_t) 1375,

            MILLIWATT_PER_SQUARE_METER = (std::int16_t) 1376 /* mW/m2 */,                          UNITCONSTANT_1376 = (std::int16_t) 1376,
            MICROWATT_PER_SQUARE_METER = (std::int16_t) 1377 /* uW/m2 */,                          UNITCONSTANT_1377 = (std::int16_t) 1377,
            PICOWATT_PER_SQUARE_METER = (std::int16_t) 1378 /* pW/m2 */,                           UNITCONSTANT_1378 = (std::int16_t) 1378,
            PASCAL_SECOND_PER_CUBIC_METER = (std::int16_t) 1379 /* Pa*s/m 3 */,                    UNITCONSTANT_1379 = (std::int16_t) 1379,
            NEWTON_SECOND_PER_METER = (std::int16_t) 1380 /* N*s/m */,                             UNITCONSTANT_1380 = (std::int16_t) 1380,
            PASCAL_SECOND_PER_METER = (std::int16_t) 1381 /* Pa*s/m */,                            UNITCONSTANT_1381 = (std::int16_t) 1381,
            BEL = (std::int16_t) 1382 /* B */,                                                     UNITCONSTANT_1382 = (std::int16_t) 1382,
            DECIBEL = (std::int16_t) 1383 /* dB */,                                                UNITCONSTANT_1383 = (std::int16_t) 1383,
            MOLE = (std::int16_t) 1384 /* mol */,                                                  UNITCONSTANT_1384 = (std::int16_t) 1384,
            KILOMOLE = (std::int16_t) 1385 /* kmol */,                                             UNITCONSTANT_1385 = (std::int16_t) 1385,
            MILL_MOLE = (std::int16_t) 1386 /* mmol */,                                            UNITCONSTANT_1386 = (std::int16_t) 1386,
            MICROMOLE = (std::int16_t) 1387 /* umol */,                                            UNITCONSTANT_1387 = (std::int16_t) 1387,
            KILOGRAM_PER_MOLE = (std::int16_t) 1388 /* kg/mol */,                                  UNITCONSTANT_1388 = (std::int16_t) 1388,
            GRAM_PER_MOLE = (std::int16_t) 1389 /* g/mol */,                                       UNITCONSTANT_1389 = (std::int16_t) 1389,
            CUBIC_METER_PER_MOLE = (std::int16_t) 1390 /* m 3/mol */,                              UNITCONSTANT_1390 = (std::int16_t) 1390,
            CUBIC_DECIMETER_PER_MOLE = (std::int16_t) 1391 /* dm3 /mol */,                         UNITCONSTANT_1391 = (std::int16_t) 1391,
            CUBIC_CENTIMETER_PER_MOLE = (std::int16_t) 1392 /* cm 3/mol */,                        UNITCONSTANT_1392 = (std::int16_t) 1392,
            LITER_PER_MOLE = (std::int16_t) 1393 /* L/mol */,                                      UNITCONSTANT_1393 = (std::int16_t) 1393,
            JOULE_PER_MOLE = (std::int16_t) 1394 /* J/mol */,                                      UNITCONSTANT_1394 = (std::int16_t) 1394,
            KILOJOULE_PER_MOLE = (std::int16_t) 1395 /* kJ/mol */,                                 UNITCONSTANT_1395 = (std::int16_t) 1395,
            JOULE_PER_MOLE_KELVIN = (std::int16_t) 1396 /* J/(mol-K) */,                           UNITCONSTANT_1396 = (std::int16_t) 1396,
            MOLE_PER_CUBIC_METER = (std::int16_t) 1397 /* mol/m 3 */,                              UNITCONSTANT_1397 = (std::int16_t) 1397,
            MOLE_PER_CUBIC_DECIMETER = (std::int16_t) 1398 /* mol/dm 3 */,                         UNITCONSTANT_1398 = (std::int16_t) 1398,
            MOLE_PER_LITER = (std::int16_t) 1399 /* mol/L */,                                      UNITCONSTANT_1399 = (std::int16_t) 1399,
            MOLE_PER_KILOGRAM = (std::int16_t) 1400 /* mol/kg */,                                  UNITCONSTANT_1400 = (std::int16_t) 1400,
            MILLIMOLE_PER_KILOGRAM = (std::int16_t) 1401 /* mmol/kg */,                            UNITCONSTANT_1401 = (std::int16_t) 1401,
            BECQUEREL = (std::int16_t) 1402 /* Bq */,                                              UNITCONSTANT_1402 = (std::int16_t) 1402,
            MEGABECQUEREL = (std::int16_t) 1403 /* MBq */,                                         UNITCONSTANT_1403 = (std::int16_t) 1403,
            KILOBECQUEREL = (std::int16_t) 1404 /* kBq */,                                         UNITCONSTANT_1404 = (std::int16_t) 1404,
            BECQUEREL_PER_KILOGRAM = (std::int16_t) 1405 /* Bq/kg */,                              UNITCONSTANT_1405 = (std::int16_t) 1405,
            KILOBECQUEREL_PER_KILOGRAM = (std::int16_t) 1406 /* kBq/kg */,                         UNITCONSTANT_1406 = (std::int16_t) 1406,
            MEGABECQUEREL_PER_KILOGRAM = (std::int16_t) 1407 /* MBq/kg */,                         UNITCONSTANT_1407 = (std::int16_t) 1407,
            GRAY = (std::int16_t) 1408 /* Gy */,                                                   UNITCONSTANT_1408 = (std::int16_t) 1408,
            MILLIGRAY = (std::int16_t) 1409 /* mGy */,                                             UNITCONSTANT_1409 = (std::int16_t) 1409,
            RAD = (std::int16_t) 1410 /* rd */,                                                    UNITCONSTANT_1410 = (std::int16_t) 1410,
            SIEVERT = (std::int16_t) 1411 /* Sv */,                                                UNITCONSTANT_1411 = (std::int16_t) 1411,
            MILLISIEVERT = (std::int16_t) 1412 /* mSv */,                                          UNITCONSTANT_1412 = (std::int16_t) 1412,
            REM = (std::int16_t) 1413 /* rem */,                                                   UNITCONSTANT_1413 = (std::int16_t) 1413,
            COULOMB_PER_KILOGRAM = (std::int16_t) 1414 /* C/kg */,                                 UNITCONSTANT_1414 = (std::int16_t) 1414,
            MILLICOULOMB_PER_KILOGRAM = (std::int16_t) 1415 /* mC/kg */,                           UNITCONSTANT_1415 = (std::int16_t) 1415,
            ROENTGEN = (std::int16_t) 1416 /* R */,                                                UNITCONSTANT_1416 = (std::int16_t) 1416,
            INVERS_JOULE_CUBIC_METERS = (std::int16_t) 1417 /* 1/J*m3 */,                          UNITCONSTANT_1417 = (std::int16_t) 1417,
            CHARGE_PER_VOLT_CUBIC_METERS = (std::int16_t) 1418 /* e/V*m3 */,                       UNITCONSTANT_1418 = (std::int16_t) 1418,
            CUBIC_METER_PER_COULOMB = (std::int16_t) 1419 /* m 3/C */,                             UNITCONSTANT_1419 = (std::int16_t) 1419,
            VOLT_PER_KELVIN = (std::int16_t) 1420 /* V/K */,                                       UNITCONSTANT_1420 = (std::int16_t) 1420,
            MILLIVOLT_PER_KELVIN = (std::int16_t) 1421 /* mV/K */,                                 UNITCONSTANT_1421 = (std::int16_t) 1421,
            PH = (std::int16_t) 1422 /* pH */,                                                     UNITCONSTANT_1422 = (std::int16_t) 1422,
            PARTS_PER_MILLION = (std::int16_t) 1423 /* ppm */,                                     UNITCONSTANT_1423 = (std::int16_t) 1423,
            PARTS_PER_BILLION = (std::int16_t) 1424 /* ppb */,                                     UNITCONSTANT_1424 = (std::int16_t) 1424,
            PARTS_PER_THOUSAND = (std::int16_t) 1425 /* ppth */,                                   UNITCONSTANT_1425 = (std::int16_t) 1425,
            DEGREE_BRIX = (std::int16_t) 1426 /* °Brix */,                                         UNITCONSTANT_1426 = (std::int16_t) 1426,
            DEGREE_BALLING = (std::int16_t) 1427 /* °Ball */,                                      UNITCONSTANT_1427 = (std::int16_t) 1427,
            PROOF_PER_VOLUME = (std::int16_t) 1428 /* proof/vol */,                                UNITCONSTANT_1428 = (std::int16_t) 1428,
            PROOF_PER_MASS = (std::int16_t) 1429 /* proof/mass */,                                 UNITCONSTANT_1429 = (std::int16_t) 1429,
            POUND_PER_GALLON_IMPERIAL = (std::int16_t) 1430 /* lb/ImpGal */,                       UNITCONSTANT_1430 = (std::int16_t) 1430,
            KILOCALORIE_PER_SECOND = (std::int16_t) 1431 /* kcal th /s */,                         UNITCONSTANT_1431 = (std::int16_t) 1431,
            KILOCALORIE_PER_MINUTE = (std::int16_t) 1432 /* kcal th /min */,                       UNITCONSTANT_1432 = (std::int16_t) 1432,
            KILOCALORIE_PER_HOUR = (std::int16_t) 1433 /* kcal th /h */,                           UNITCONSTANT_1433 = (std::int16_t) 1433,
            KILOCALORIE_PER_DAY = (std::int16_t) 1434 /* kcal th /d */,                            UNITCONSTANT_1434 = (std::int16_t) 1434,
            MEGACALORIE_PER_SECOND = (std::int16_t) 1435 /* Mcal th/s */,                          UNITCONSTANT_1435 = (std::int16_t) 1435,
            MEGACALORIE_PER_MINUTE = (std::int16_t) 1436 /* Mcal th/min */,                        UNITCONSTANT_1436 = (std::int16_t) 1436,
            MEGACALORIE_PER_DAY = (std::int16_t) 1437 /* Mcal th/d */,                             UNITCONSTANT_1437 = (std::int16_t) 1437,
            KILOJOULE_PER_SECOND = (std::int16_t) 1438 /* kJ/s */,                                 UNITCONSTANT_1438 = (std::int16_t) 1438,
            KILOJOULE_PER_MINUTE = (std::int16_t) 1439 /* kJ/min */,                               UNITCONSTANT_1439 = (std::int16_t) 1439,
            KILOJOULE_PER_HOUR = (std::int16_t) 1440 /* kJ/h */,                                   UNITCONSTANT_1440 = (std::int16_t) 1440,
            KILOJOULE_PER_DAY = (std::int16_t) 1441 /* kJ/d */,                                    UNITCONSTANT_1441 = (std::int16_t) 1441,
            MEGAJOULE_PER_SECOND = (std::int16_t) 1442 /* MJ/s */,                                 UNITCONSTANT_1442 = (std::int16_t) 1442,
            MEGAJOULE_PER_MINUTE = (std::int16_t) 1443 /* MJ/min */,                               UNITCONSTANT_1443 = (std::int16_t) 1443,
            MEGAJOULE_PER_DAY = (std::int16_t) 1444 /* MJ/d */,                                    UNITCONSTANT_1444 = (std::int16_t) 1444,
            BRITISH_THERMAL_UNIT_PER_SECOND = (std::int16_t) 1445 /* Btuth/s */,                   UNITCONSTANT_1445 = (std::int16_t) 1445,
            BRITISH_THERMAL_UNIT_PER_MINUTE = (std::int16_t) 1446 /* Btuth/min */,                 UNITCONSTANT_1446 = (std::int16_t) 1446,
            BRITISH_THERMAL_UNIT_PER_DAY = (std::int16_t) 1447 /* Btuth/day */,                    UNITCONSTANT_1447 = (std::int16_t) 1447,
            MICROGALLON_US_PER_SECOND = (std::int16_t) 1448 /* ugal/s */,                          UNITCONSTANT_1448 = (std::int16_t) 1448,
            MILLIGALLON_US_PER_SECOND = (std::int16_t) 1449 /* mgal/s */,                          UNITCONSTANT_1449 = (std::int16_t) 1449,
            KILOGALLON_US_PER_SECOND = (std::int16_t) 1450 /* kgal/s */,                           UNITCONSTANT_1450 = (std::int16_t) 1450,
            MEGAGALLON_US_PER_SECOND = (std::int16_t) 1451 /* Mgal/s */,                           UNITCONSTANT_1451 = (std::int16_t) 1451,
            MICROGALLON_US_PER_MINUTE = (std::int16_t) 1452 /* ugal/min */,                        UNITCONSTANT_1452 = (std::int16_t) 1452,
            MILLIGALLON_US_PER_MINUTE = (std::int16_t) 1453 /* mgal/min */,                        UNITCONSTANT_1453 = (std::int16_t) 1453,
            KILOGALLON_US_PER_MINUTE = (std::int16_t) 1454 /* kgal/min */,                         UNITCONSTANT_1454 = (std::int16_t) 1454,
            MEGAGALLON_US_PER_MINUTE = (std::int16_t) 1455 /* Mgal/min */,                         UNITCONSTANT_1455 = (std::int16_t) 1455,
            MICROGALLON_US_PER_HOUR = (std::int16_t) 1456 /* ugal/h */,                            UNITCONSTANT_1456 = (std::int16_t) 1456,
            MILLIGALLON_US_PER_HOUR = (std::int16_t) 1457 /* mgal/h */,                            UNITCONSTANT_1457 = (std::int16_t) 1457,
            KILOGALLON_US_PER_HOUR = (std::int16_t) 1458 /* kgal/h */,                             UNITCONSTANT_1458 = (std::int16_t) 1458,
            MEGAGALLON_US_PER_HOUR = (std::int16_t) 1459 /* Mgal/h */,                             UNITCONSTANT_1459 = (std::int16_t) 1459,
            MICROGALLON_US_PER_DAY = (std::int16_t) 1460 /* ugal/d */,                             UNITCONSTANT_1460 = (std::int16_t) 1460,
            MILLIGALLON_US_PER_DAY = (std::int16_t) 1461 /* mgal/d */,                             UNITCONSTANT_1461 = (std::int16_t) 1461,
            KILOGALLON_US_PER_DAY = (std::int16_t) 1462 /* kgal/d */,                              UNITCONSTANT_1462 = (std::int16_t) 1462,
            MICROGALLON_IMPERIAL_PER_SECOND = (std::int16_t) 1463 /* uImpGal/s */,                 UNITCONSTANT_1463 = (std::int16_t) 1463,
            MILLIGALLON_IMPERIAL_PER_SECOND = (std::int16_t) 1464 /* mImpGal/s */,                 UNITCONSTANT_1464 = (std::int16_t) 1464,
            KILOGALLON_IMPERIAL_PER_SECOND = (std::int16_t) 1465 /* kImpGal/s */,                  UNITCONSTANT_1465 = (std::int16_t) 1465,
            MEGAGALLON_IMPERIAL_PER_SECOND = (std::int16_t) 1466 /* MImpGal/s */,                  UNITCONSTANT_1466 = (std::int16_t) 1466,
            MICROGALLON_IMPERIAL_PER_MINUTE = (std::int16_t) 1467 /* uImpGal/min */,               UNITCONSTANT_1467 = (std::int16_t) 1467,
            MILLIGALLON_IMPERIAL_PER_MINUTE = (std::int16_t) 1468 /* mImpGal/min */,               UNITCONSTANT_1468 = (std::int16_t) 1468,
            KILOGALLON_IMPERIAL_PER_MINUTE = (std::int16_t) 1469 /* kImpGal/min */,                UNITCONSTANT_1469 = (std::int16_t) 1469,
            MEGAGALLON_IMPERIAL_PER_MINUTE = (std::int16_t) 1470 /* MImpGal/min */,                UNITCONSTANT_1470 = (std::int16_t) 1470,
            MICROGALLON_IMPERIAL_PER_HOUR = (std::int16_t) 1471 /* uImpGal/h */,                   UNITCONSTANT_1471 = (std::int16_t) 1471,
            MILLIGALLON_IMPERIAL_PER_HOUR = (std::int16_t) 1472 /* mImpGal/h */,                   UNITCONSTANT_1472 = (std::int16_t) 1472,
            KILOGALLON_IMPERIAL_PER_HOUR = (std::int16_t) 1473 /* kImpGal/h */,                    UNITCONSTANT_1473 = (std::int16_t) 1473,
            MEGAGALLON_IMPERIAL_PER_HOUR = (std::int16_t) 1474 /* MImpGal/h */,                    UNITCONSTANT_1474 = (std::int16_t) 1474,
            MICROGALLON_IMPERIAL_PER_DAY = (std::int16_t) 1475 /* uImpGal/d */,                    UNITCONSTANT_1475 = (std::int16_t) 1475,
            MILLIGALLON_IMPERIAL_PER_DAY = (std::int16_t) 1476 /* mImpGal/d */,                    UNITCONSTANT_1476 = (std::int16_t) 1476,
            KILOGALLON_IMPERIAL_PER_DAY = (std::int16_t) 1477 /* kImpGal/d */,                     UNITCONSTANT_1477 = (std::int16_t) 1477,
            MEGAGALLON_IMPERIAL_PER_DAY = (std::int16_t) 1478 /* MImpGal/d */,                     UNITCONSTANT_1478 = (std::int16_t) 1478,
            MICROBARREL_PER_SECOND = (std::int16_t) 1479 /* ubbl/s */,                             UNITCONSTANT_1479 = (std::int16_t) 1479,
            MILLIBARREL_PER_SECOND = (std::int16_t) 1480 /* mbbl/s */,                             UNITCONSTANT_1480 = (std::int16_t) 1480,
            KILOBARREL_PER_SECOND = (std::int16_t) 1481 /* kbbl/s */,                              UNITCONSTANT_1481 = (std::int16_t) 1481,
            MEGABARREL_PER_SECOND = (std::int16_t) 1482 /* Mbbl/s */,                              UNITCONSTANT_1482 = (std::int16_t) 1482,
            MICROBARREL_PER_MINUTE = (std::int16_t) 1483 /* ubbl/min */,                           UNITCONSTANT_1483 = (std::int16_t) 1483,
            MILLIBARREL_PER_MINUTE = (std::int16_t) 1484 /* mbbl/min */,                           UNITCONSTANT_1484 = (std::int16_t) 1484,
            KILOBARREL_PER_MINUTE = (std::int16_t) 1485 /* kbbl/min */,                            UNITCONSTANT_1485 = (std::int16_t) 1485,
            MEGABARREL_PER_MINUTE = (std::int16_t) 1486 /* Mbbl/min */,                            UNITCONSTANT_1486 = (std::int16_t) 1486,
            MICROBARREL_PER_HOUR = (std::int16_t) 1487 /* ubbl/h */,                               UNITCONSTANT_1487 = (std::int16_t) 1487,
            MILLIBARREL_PER_HOUR = (std::int16_t) 1488 /* mbbl/h */,                               UNITCONSTANT_1488 = (std::int16_t) 1488,
            KILOBARREL_PER_HOUR = (std::int16_t) 1489 /* kbbl/h */,                                UNITCONSTANT_1489 = (std::int16_t) 1489,
            MEGABARREL_PER_HOUR = (std::int16_t) 1490 /* Mbbl/h */,                                UNITCONSTANT_1490 = (std::int16_t) 1490,
            MICROBARREL_PER_DAY = (std::int16_t) 1491 /* ubbl/d */,                                UNITCONSTANT_1491 = (std::int16_t) 1491,
            MILLIBARREL_PER_DAY = (std::int16_t) 1492 /* mbbl/d */,                                UNITCONSTANT_1492 = (std::int16_t) 1492,
            KILOBARREL_PER_DAY = (std::int16_t) 1493 /* kbbl/d */,                                 UNITCONSTANT_1493 = (std::int16_t) 1493,
            MEGABARREL_PER_DAY = (std::int16_t) 1494 /* Mbbl/d */,                                 UNITCONSTANT_1494 = (std::int16_t) 1494,
            CUBIC_MICROMETER_PER_SECOND = (std::int16_t) 1495 /* um 3/s */,                        UNITCONSTANT_1495 = (std::int16_t) 1495,
            CUBIC_MILLIMETER_PER_SECOND = (std::int16_t) 1496 /* mm 3/s */,                        UNITCONSTANT_1496 = (std::int16_t) 1496,
            CUBIC_KILOMETER_PER_SECOND = (std::int16_t) 1497 /* km 3/s */,                         UNITCONSTANT_1497 = (std::int16_t) 1497,
            CUBIC_MEGAMETER_PER_SECOND = (std::int16_t) 1498 /* Mm 3/s */,                         UNITCONSTANT_1498 = (std::int16_t) 1498,
            CUBIC_MICROMETER_PER_MINUTE = (std::int16_t) 1499 /* um 3/min */,                      UNITCONSTANT_1499 = (std::int16_t) 1499,
            CUBIC_MILLIMETER_PER_MINUTE = (std::int16_t) 1500 /* mm 3/min */,                      UNITCONSTANT_1500 = (std::int16_t) 1500,
            CUBIC_KILOMETER_PER_MINUTE = (std::int16_t) 1501 /* km 3/min */,                       UNITCONSTANT_1501 = (std::int16_t) 1501,
            CUBIC_MEGAMETER_PER_MINUTE = (std::int16_t) 1502 /* Mm 3/min */,                       UNITCONSTANT_1502 = (std::int16_t) 1502,
            CUBIC_MICROMETER_PER_HOUR = (std::int16_t) 1503 /* um 3/h */,                          UNITCONSTANT_1503 = (std::int16_t) 1503,
            CUBIC_MILLIMETER_PER_HOUR = (std::int16_t) 1504 /* mm 3/h */,                          UNITCONSTANT_1504 = (std::int16_t) 1504,
            CUBIC_KILOMETER_PER_HOUR = (std::int16_t) 1505 /* km 3/h */,                           UNITCONSTANT_1505 = (std::int16_t) 1505,
            CUBIC_MEGAMETER_PER_HOUR = (std::int16_t) 1506 /* Mm 3/h */,                           UNITCONSTANT_1506 = (std::int16_t) 1506,
            CUBIC_MICROMETER_PER_DAY = (std::int16_t) 1507 /* um 3/d */,                           UNITCONSTANT_1507 = (std::int16_t) 1507,
            CUBIC_MILLIMETER_PER_DAY = (std::int16_t) 1508 /* mm 3/d */,                           UNITCONSTANT_1508 = (std::int16_t) 1508,
            CUBIC_KILOMETER_PER_DAY = (std::int16_t) 1509 /* km 3/d */,                            UNITCONSTANT_1509 = (std::int16_t) 1509,
            CUBIC_MEGAMETER_PER_DAY = (std::int16_t) 1510 /* Mm 3/d */,                            UNITCONSTANT_1510 = (std::int16_t) 1510,
            CUBIC_CENTIMETER_PER_SECOND = (std::int16_t) 1511 /* cm 3/s */,                        UNITCONSTANT_1511 = (std::int16_t) 1511,
            CUBIC_CENTIMETER_PER_MINUTE = (std::int16_t) 1512 /* cm 3/min */,                      UNITCONSTANT_1512 = (std::int16_t) 1512,
            CUBIC_CENTIMETER_PER_HOUR = (std::int16_t) 1513 /* cm 3/h */,                          UNITCONSTANT_1513 = (std::int16_t) 1513,
            CUBIC_CENTIMETER_PER_DAY = (std::int16_t) 1514 /* cm 3/d */,                           UNITCONSTANT_1514 = (std::int16_t) 1514,
            KILOCALORIE_PER_KILOGRAM = (std::int16_t) 1515 /* kcal th /kg */,                      UNITCONSTANT_1515 = (std::int16_t) 1515,
            BRITISH_THERMAL_UNIT_PER_POUND = (std::int16_t) 1516 /* Btuth/lb */,                   UNITCONSTANT_1516 = (std::int16_t) 1516,
            KILOLITER = (std::int16_t) 1517 /* kL */,                                              UNITCONSTANT_1517 = (std::int16_t) 1517,
            KILOLITER_PER_MINUTE = (std::int16_t) 1518 /* kL/min */,                               UNITCONSTANT_1518 = (std::int16_t) 1518,
            KILOLITER_PER_HOUR = (std::int16_t) 1519 /* kL/h */,                                   UNITCONSTANT_1519 = (std::int16_t) 1519,
            KILOLITER_PER_DAY = (std::int16_t) 1520 /* kL/d */,                                    UNITCONSTANT_1520 = (std::int16_t) 1520,
            VENDOR_SPECIFIC_1521 = (std::int16_t) 1521 /* vendor-specific */,                      UNITCONSTANT_1521 = (std::int16_t) 1521,
            VENDOR_SPECIFIC_1522 = (std::int16_t) 1522 /* vendor-specific */,                      UNITCONSTANT_1522 = (std::int16_t) 1522,
            VENDOR_SPECIFIC_1523 = (std::int16_t) 1523 /* vendor-specific */,                      UNITCONSTANT_1523 = (std::int16_t) 1523,
            VENDOR_SPECIFIC_1524 = (std::int16_t) 1524 /* vendor-specific */,                      UNITCONSTANT_1524 = (std::int16_t) 1524,
            VENDOR_SPECIFIC_1525 = (std::int16_t) 1525 /* vendor-specific */,                      UNITCONSTANT_1525 = (std::int16_t) 1525,
            VENDOR_SPECIFIC_1526 = (std::int16_t) 1526 /* vendor-specific */,                      UNITCONSTANT_1526 = (std::int16_t) 1526,
            VENDOR_SPECIFIC_1527 = (std::int16_t) 1527 /* vendor-specific */,                      UNITCONSTANT_1527 = (std::int16_t) 1527,
            VENDOR_SPECIFIC_1528 = (std::int16_t) 1528 /* vendor-specific */,                      UNITCONSTANT_1528 = (std::int16_t) 1528,
            VENDOR_SPECIFIC_1529 = (std::int16_t) 1529 /* vendor-specific */,                      UNITCONSTANT_1529 = (std::int16_t) 1529,
            VENDOR_SPECIFIC_1530 = (std::int16_t) 1530 /* vendor-specific */,                      UNITCONSTANT_1530 = (std::int16_t) 1530,
            VENDOR_SPECIFIC_1531 = (std::int16_t) 1531 /* vendor-specific */,                      UNITCONSTANT_1531 = (std::int16_t) 1531,
            VENDOR_SPECIFIC_1532 = (std::int16_t) 1532 /* vendor-specific */,                      UNITCONSTANT_1532 = (std::int16_t) 1532,
            VENDOR_SPECIFIC_1533 = (std::int16_t) 1533 /* vendor-specific */,                      UNITCONSTANT_1533 = (std::int16_t) 1533,
            VENDOR_SPECIFIC_1534 = (std::int16_t) 1534 /* vendor-specific */,                      UNITCONSTANT_1534 = (std::int16_t) 1534,
            VENDOR_SPECIFIC_1535 = (std::int16_t) 1535 /* vendor-specific */,                      UNITCONSTANT_1535 = (std::int16_t) 1535,
            VENDOR_SPECIFIC_1536 = (std::int16_t) 1536 /* vendor-specific */,                      UNITCONSTANT_1536 = (std::int16_t) 1536,
            VENDOR_SPECIFIC_1537 = (std::int16_t) 1537 /* vendor-specific */,                      UNITCONSTANT_1537 = (std::int16_t) 1537,
            VENDOR_SPECIFIC_1538 = (std::int16_t) 1538 /* vendor-specific */,                      UNITCONSTANT_1538 = (std::int16_t) 1538,
            VENDOR_SPECIFIC_1539 = (std::int16_t) 1539 /* vendor-specific */,                      UNITCONSTANT_1539 = (std::int16_t) 1539,
            VENDOR_SPECIFIC_1540 = (std::int16_t) 1540 /* vendor-specific */,                      UNITCONSTANT_1540 = (std::int16_t) 1540,
            VENDOR_SPECIFIC_1541 = (std::int16_t) 1541 /* vendor-specific */,                      UNITCONSTANT_1541 = (std::int16_t) 1541,
            VENDOR_SPECIFIC_1542 = (std::int16_t) 1542 /* vendor-specific */,                      UNITCONSTANT_1542 = (std::int16_t) 1542,
            VENDOR_SPECIFIC_1543 = (std::int16_t) 1543 /* vendor-specific */,                      UNITCONSTANT_1543 = (std::int16_t) 1543,
            VENDOR_SPECIFIC_1544 = (std::int16_t) 1544 /* vendor-specific */,                      UNITCONSTANT_1544 = (std::int16_t) 1544,
            VENDOR_SPECIFIC_1545 = (std::int16_t) 1545 /* vendor-specific */,                      UNITCONSTANT_1545 = (std::int16_t) 1545,
            VENDOR_SPECIFIC_1546 = (std::int16_t) 1546 /* vendor-specific */,                      UNITCONSTANT_1546 = (std::int16_t) 1546,
            VENDOR_SPECIFIC_1547 = (std::int16_t) 1547 /* vendor-specific */,                      UNITCONSTANT_1547 = (std::int16_t) 1547,
            VENDOR_SPECIFIC_1548 = (std::int16_t) 1548 /* vendor-specific */,                      UNITCONSTANT_1548 = (std::int16_t) 1548,
            VENDOR_SPECIFIC_1549 = (std::int16_t) 1549 /* vendor-specific */,                      UNITCONSTANT_1549 = (std::int16_t) 1549,
            VENDOR_SPECIFIC_1550 = (std::int16_t) 1550 /* vendor-specific */,                      UNITCONSTANT_1550 = (std::int16_t) 1550,
            SIEMENS_PER_CENTIMETER = (std::int16_t) 1551 /* S/cm */,                               UNITCONSTANT_1551 = (std::int16_t) 1551,
            MICROSIEMENS_PER_CENTIMETER = (std::int16_t) 1552 /* uS/cm */,                         UNITCONSTANT_1552 = (std::int16_t) 1552,
            MILLISIEMENS_PER_METER = (std::int16_t) 1553 /* mS/m */,                               UNITCONSTANT_1553 = (std::int16_t) 1553,
            MICROSIEMENS_PER_METER = (std::int16_t) 1554 /* uS/m */,                               UNITCONSTANT_1554 = (std::int16_t) 1554,
            MEGOHM_CENTIMETER = (std::int16_t) 1555 /* MOhm*cm */,                                 UNITCONSTANT_1555 = (std::int16_t) 1555,
            KILOHM_CENTIMETER = (std::int16_t) 1556 /* kOhm*cm */,                                 UNITCONSTANT_1556 = (std::int16_t) 1556,
            GEWICHTSPROZENT = (std::int16_t) 1557 /* Gew% */,                                      UNITCONSTANT_1557 = (std::int16_t) 1557,
            MILLIGRAM_PER_LITER = (std::int16_t) 1558 /* mg/L */,                                  UNITCONSTANT_1558 = (std::int16_t) 1558,
            MICROGRAM_PER_LITER = (std::int16_t) 1559 /* ug/L */,                                  UNITCONSTANT_1559 = (std::int16_t) 1559,
            PERCENT_SATURATION = (std::int16_t) 1560 /* %Sät */,                                   UNITCONSTANT_1560 = (std::int16_t) 1560,
            VPM = (std::int16_t) 1561 /* vpm */,                                                   UNITCONSTANT_1561 = (std::int16_t) 1561,
            VOLUME_PERCENT = (std::int16_t) 1562 /* %vol */,                                       UNITCONSTANT_1562 = (std::int16_t) 1562,
            MILLILITER_PER_MINUTE = (std::int16_t) 1563 /* ml/min */,                              UNITCONSTANT_1563 = (std::int16_t) 1563,
            MILLIGRAM_PER_CUBIC_DECIMETER = (std::int16_t) 1564 /* mg/dm 3 */,                     UNITCONSTANT_1564 = (std::int16_t) 1564,

            // Duplicate of 1558
            //MILLIGRAM_PER_LITER                                = (std::int16_t) 1565 /* mg/L */, UNITCONSTANT_1565 = (std::int16_t) 1565,

            MILLIGRAM_PER_CUBIC_METER = (std::int16_t) 1566 /* mg/m3 */,                           UNITCONSTANT_1566 = (std::int16_t) 1566,
            CARAT_JEWEL = (std::int16_t) 1567 /* ct */,                                            UNITCONSTANT_1567 = (std::int16_t) 1567,
            POUND_TROY_OR_APOTHECARY = (std::int16_t) 1568 /* lb (tr) */,                          UNITCONSTANT_1568 = (std::int16_t) 1568,
            OUNCE_TROY_OR_APOTHECARY = (std::int16_t) 1569 /* oz (tr) */,                          UNITCONSTANT_1569 = (std::int16_t) 1569,
            OUNCE_US_FLUID = (std::int16_t) 1570 /* fl oz (U.S.) */,                               UNITCONSTANT_1570 = (std::int16_t) 1570,

            // Duplicate of 1036
            //CUBIC_CENTIMETER                                   = (std::int16_t) 1571 /* cm 3 */, UNITCONSTANT_1571 = (std::int16_t) 1571,

            ACRE_FOOT = (std::int16_t) 1572 /* af */,                                              UNITCONSTANT_1572 = (std::int16_t) 1572,
            NORMAL_CUBIC_METER = (std::int16_t) 1573 /* m 3 normal */,                             UNITCONSTANT_1573 = (std::int16_t) 1573,
            NORMAL_LITER = (std::int16_t) 1574 /* L normal */,                                     UNITCONSTANT_1574 = (std::int16_t) 1574,
            STANDARD_CUBIC_METER = (std::int16_t) 1575 /* m 3 std. */,                             UNITCONSTANT_1575 = (std::int16_t) 1575,
            STANDARD_LITER = (std::int16_t) 1576 /* L std. */,                                     UNITCONSTANT_1576 = (std::int16_t) 1576,
            MILLILITER_PER_SECOND = (std::int16_t) 1577 /* ml/s */,                                UNITCONSTANT_1577 = (std::int16_t) 1577,
            MILLILITER_PER_HOUR = (std::int16_t) 1578 /* ml/h */,                                  UNITCONSTANT_1578 = (std::int16_t) 1578,
            MILLILITER_PER_DAY = (std::int16_t) 1579 /* ml/d */,                                   UNITCONSTANT_1579 = (std::int16_t) 1579,
            ACRE_FOOT_PER_SECOND = (std::int16_t) 1580 /* af/s */,                                 UNITCONSTANT_1580 = (std::int16_t) 1580,
            ACRE_FOOT_PER_MINUTE = (std::int16_t) 1581 /* af/min */,                               UNITCONSTANT_1581 = (std::int16_t) 1581,
            ACRE_FOOT_PER_HOUR = (std::int16_t) 1582 /* af/h */,                                   UNITCONSTANT_1582 = (std::int16_t) 1582,
            ACRE_FOOT_PER_DAY = (std::int16_t) 1583 /* af/d */,                                    UNITCONSTANT_1583 = (std::int16_t) 1583,
            OUNCE_US_FLUID_PER_SECOND = (std::int16_t) 1584 /* fl oz (U.S.)/s */,                  UNITCONSTANT_1584 = (std::int16_t) 1584,
            OUNCE_US_FLUID_PER_MINUTE = (std::int16_t) 1585 /* fl oz (U.S.) /min */,               UNITCONSTANT_1585 = (std::int16_t) 1585,
            OUNCE_US_FLUID_PER_HOUR = (std::int16_t) 1586 /* fl oz (U.S.)/h */,                    UNITCONSTANT_1586 = (std::int16_t) 1586,
            OUNCE_US_FLUID_PER_DAY = (std::int16_t) 1587 /* fl oz (U.S.)/d */,                     UNITCONSTANT_1587 = (std::int16_t) 1587,
            NORMAL_CUBIC_METER_PER_SECOND = (std::int16_t) 1588 /* m 3/s normal */,                UNITCONSTANT_1588 = (std::int16_t) 1588,
            NORMAL_CUBIC_METER_PER_MINUTE = (std::int16_t) 1589 /* m 3/min normal */,              UNITCONSTANT_1589 = (std::int16_t) 1589,
            NORMAL_CUBIC_METER_PER_HOUR = (std::int16_t) 1590 /* m 3/h normal */,                  UNITCONSTANT_1590 = (std::int16_t) 1590,
            NORMAL_CUBIC_METER_PER_DAY = (std::int16_t) 1591 /* m 3/d normal */,                   UNITCONSTANT_1591 = (std::int16_t) 1591,
            NORMAL_LITER_PER_SECOND = (std::int16_t) 1592 /* L/s normal */,                        UNITCONSTANT_1592 = (std::int16_t) 1592,
            NORMAL_LITER_PER_MINUTE = (std::int16_t) 1593 /* L/min normal */,                      UNITCONSTANT_1593 = (std::int16_t) 1593,
            NORMAL_LITER_PER_HOUR = (std::int16_t) 1594 /* L/h normal */,                          UNITCONSTANT_1594 = (std::int16_t) 1594,
            NORMAL_LITER_PER_DAY = (std::int16_t) 1595 /* L/d normal */,                           UNITCONSTANT_1595 = (std::int16_t) 1595,
            STANDARD_CUBIC_METER_PER_SECOND = (std::int16_t) 1596 /* m 3/s std. */,                UNITCONSTANT_1596 = (std::int16_t) 1596,
            STANDARD_CUBIC_METER_PER_MINUTE = (std::int16_t) 1597 /* m 3/min std. */,              UNITCONSTANT_1597 = (std::int16_t) 1597,
            STANDARD_CUBIC_METER_PER_HOUR = (std::int16_t) 1598 /* m 3/h std. */,                  UNITCONSTANT_1598 = (std::int16_t) 1598,
            STANDARD_CUBIC_METER_PER_DAY = (std::int16_t) 1599 /* m 3/d std. */,                   UNITCONSTANT_1599 = (std::int16_t) 1599,
            STANDARD_LITER_PER_SECOND = (std::int16_t) 1600 /* L/s std. */,                        UNITCONSTANT_1600 = (std::int16_t) 1600,
            STANDARD_LITER_PER_MINUTE = (std::int16_t) 1601 /* L/min std. */,                      UNITCONSTANT_1601 = (std::int16_t) 1601,
            STANDARD_LITER_PER_HOUR = (std::int16_t) 1602 /* L/h std. */,                          UNITCONSTANT_1602 = (std::int16_t) 1602,
            STANDARD_LITER_PER_DAY = (std::int16_t) 1603 /* L/d std. */,                           UNITCONSTANT_1603 = (std::int16_t) 1603,
            STANDARD_CUBIC_FOOT_PER_SECOND = (std::int16_t) 1604 /* ft3 /s std. */,                UNITCONSTANT_1604 = (std::int16_t) 1604,
            STANDARD_CUBIC_FOOT_PER_DAY = (std::int16_t) 1605 /* ft3 /d std. */,                   UNITCONSTANT_1605 = (std::int16_t) 1605,
            OUNCE_PER_SECOND = (std::int16_t) 1606 /* oz/s */,                                     UNITCONSTANT_1606 = (std::int16_t) 1606,
            OUNCE_PER_MINUTE = (std::int16_t) 1607 /* oz/min */,                                   UNITCONSTANT_1607 = (std::int16_t) 1607,
            OUNCE_PER_HOUR = (std::int16_t) 1608 /* oz/h */,                                       UNITCONSTANT_1608 = (std::int16_t) 1608,
            OUNCE_PER_DAY = (std::int16_t) 1609 /* oz/d */,                                        UNITCONSTANT_1609 = (std::int16_t) 1609,
            PASCAL_ABSOLUTE = (std::int16_t) 1610 /* Pa a */,                                      UNITCONSTANT_1610 = (std::int16_t) 1610,
            PASCAL_GAUGE = (std::int16_t) 1611 /* Pa g */,                                         UNITCONSTANT_1611 = (std::int16_t) 1611,
            GIGAPASCAL_ABSOLUTE = (std::int16_t) 1612 /* GPa a */,                                 UNITCONSTANT_1612 = (std::int16_t) 1612,
            GIGAPASCAL_GAUGE = (std::int16_t) 1613 /* GPa g */,                                    UNITCONSTANT_1613 = (std::int16_t) 1613,
            MEGAPASCAL_ABSOLUTE = (std::int16_t) 1614 /* MPaa */,                                  UNITCONSTANT_1614 = (std::int16_t) 1614,
            MEGAPASCAL_GAUGE = (std::int16_t) 1615 /* MPag */,                                     UNITCONSTANT_1615 = (std::int16_t) 1615,
            KILOPASCAL_ABSOLUTE = (std::int16_t) 1616 /* kPa a */,                                 UNITCONSTANT_1616 = (std::int16_t) 1616,
            KILOPASCAL_GAUGE = (std::int16_t) 1617 /* kPa g */,                                    UNITCONSTANT_1617 = (std::int16_t) 1617,
            MILLIPASCAL_ABSOLUTE = (std::int16_t) 1618 /* mPaa */,                                 UNITCONSTANT_1618 = (std::int16_t) 1618,
            MILLIPASCAL_GAUGE = (std::int16_t) 1619 /* mPa g */,                                   UNITCONSTANT_1619 = (std::int16_t) 1619,
            MICROPASCAL_ABSOLUTE = (std::int16_t) 1620 /* uPa a */,                                UNITCONSTANT_1620 = (std::int16_t) 1620,
            MICROPASCAL_GAUGE = (std::int16_t) 1621 /* uPa g */,                                   UNITCONSTANT_1621 = (std::int16_t) 1621,
            HECTOPASCAL_ABSOLUTE = (std::int16_t) 1622 /* hPaa */,                                 UNITCONSTANT_1622 = (std::int16_t) 1622,
            HECTOPASCAL_GAUGE = (std::int16_t) 1623 /* hPag */,                                    UNITCONSTANT_1623 = (std::int16_t) 1623,
            GRAM_FORCE_PER_SQUARE_CENTIMETER_ABSOLUTE = (std::int16_t) 1624 /* gf/cm 2a */,        UNITCONSTANT_1624 = (std::int16_t) 1624,
            GRAM_FORCE_PER_SQUARE_CENTIMETER_GAUGE = (std::int16_t) 1625 /* gf/cm 2g */,           UNITCONSTANT_1625 = (std::int16_t) 1625,
            KILOGRAM_FORCE_PER_SQUARE_CENTIMETER_ABSOLUTE = (std::int16_t) 1626 /* kgf/cm2 a */,   UNITCONSTANT_1626 = (std::int16_t) 1626,
            KILOGRAM_FORCE_PER_SQUARE_CENTIMETER_GAUGE = (std::int16_t) 1627 /* kgf/cm2 g */,      UNITCONSTANT_1627 = (std::int16_t) 1627,
            STANDARD_DENSITY_AT_4C = (std::int16_t) 1628 /* SD4°C */,                              UNITCONSTANT_1628 = (std::int16_t) 1628,
            STANDARD_DENSITY_AT_15C = (std::int16_t) 1629 /* SD15°C */,                            UNITCONSTANT_1629 = (std::int16_t) 1629,
            STANDARD_DENSITY_AT_20C = (std::int16_t) 1630 /* SD20°C */,                            UNITCONSTANT_1630 = (std::int16_t) 1630,
            METRIC_HORSEPOWER = (std::int16_t) 1631 /* PS */,                                      UNITCONSTANT_1631 = (std::int16_t) 1631,
            PARTS_PER_TRILLION = (std::int16_t) 1632 /* ppt */,                                    UNITCONSTANT_1632 = (std::int16_t) 1632,
            HECTOLITER_PER_SECOND = (std::int16_t) 1633 /* hl/s */,                                UNITCONSTANT_1633 = (std::int16_t) 1633,
            HECTOLITER_PER_MINUTE = (std::int16_t) 1634 /* hl/min */,                              UNITCONSTANT_1634 = (std::int16_t) 1634,
            HECTOLITER_PER_HOUR = (std::int16_t) 1635 /* hl/h */,                                  UNITCONSTANT_1635 = (std::int16_t) 1635,
            HECTOLITER_PER_DAY = (std::int16_t) 1636 /* hl/d */,                                   UNITCONSTANT_1636 = (std::int16_t) 1636,
            BARREL_US_LIQUID_PER_SECOND = (std::int16_t) 1637 /* bbl (liq)/s */,                   UNITCONSTANT_1637 = (std::int16_t) 1637,
            BARREL_US_LIQUID_PER_MINUTE = (std::int16_t) 1638 /* bbl (liq)/min */,                 UNITCONSTANT_1638 = (std::int16_t) 1638,
            BARREL_US_LIQUID_PER_HOUR = (std::int16_t) 1639 /* bbl (liq)/h */,                     UNITCONSTANT_1639 = (std::int16_t) 1639,
            BARREL_US_LIQUID_PER_DAY = (std::int16_t) 1640 /* bbl (liq)/d */,                      UNITCONSTANT_1640 = (std::int16_t) 1640,
            BARREL_US_FEDERAL = (std::int16_t) 1641 /* bbl (fed) */,                               UNITCONSTANT_1641 = (std::int16_t) 1641,
            BARREL_US_FEDERAL_PER_SECOND = (std::int16_t) 1642 /* bbl (fed)/s */,                  UNITCONSTANT_1642 = (std::int16_t) 1642,
            BARREL_US_FEDERAL_PER_MINUTE = (std::int16_t) 1643 /* bbl (fed)/min */,                UNITCONSTANT_1643 = (std::int16_t) 1643,
            BARREL_US_FEDERAL_PER_HOUR = (std::int16_t) 1644 /* bbl (fed)/h */,                    UNITCONSTANT_1644 = (std::int16_t) 1644,
            BARREL_US_FEDERAL_PER_DAY = (std::int16_t) 1645 /* bbl (fed)/d */,                     UNITCONSTANT_1645 = (std::int16_t) 1645,
            VOLT_AMPERE_REACTIVE = (std::int16_t) 1646 /* var */,                                  UNITCONSTANT_1646 = (std::int16_t) 1646,
            KILOVOLT_AMPERE_REACTIVE = (std::int16_t) 1647 /* kvar */,                             UNITCONSTANT_1647 = (std::int16_t) 1647,
            MEGAVOLT_AMPERE_REACTIVE = (std::int16_t) 1648 /* Mvar */,                             UNITCONSTANT_1648 = (std::int16_t) 1648,
            VOLT_AMPERE_REACTIVE_HOUR = (std::int16_t) 1649 /* var*h */,                           UNITCONSTANT_1649 = (std::int16_t) 1649,
            KILOVOLT_AMPERE_REACTIVE_HOUR = (std::int16_t) 1650 /* kvar*h */,                      UNITCONSTANT_1650 = (std::int16_t) 1650,
            MEGAVOLT_AMPERE_REACTIVE_HOUR = (std::int16_t) 1651 /* Mvar*h */,                      UNITCONSTANT_1651 = (std::int16_t) 1651,
            VOLT_AMPERE = (std::int16_t) 1652 /* VA */,                                            UNITCONSTANT_1652 = (std::int16_t) 1652,
            KILOVOLT_AMPERE = (std::int16_t) 1653 /* kVA */,                                       UNITCONSTANT_1653 = (std::int16_t) 1653,
            MEGAVOLT_AMPERE = (std::int16_t) 1654 /* MVA */,                                       UNITCONSTANT_1654 = (std::int16_t) 1654,
            VOLT_AMPERE_HOUR = (std::int16_t) 1655 /* VA*h */,                                     UNITCONSTANT_1655 = (std::int16_t) 1655,
            KILOVOLT_AMPERE_HOUR = (std::int16_t) 1656 /* kVA*h */,                                UNITCONSTANT_1656 = (std::int16_t) 1656,
            MEGAVOLT_AMPERE_HOUR = (std::int16_t) 1657 /* MVA*h */,                                UNITCONSTANT_1657 = (std::int16_t) 1657,
            G_FORCE = (std::int16_t) 1658 /* g */,                                                 UNITCONSTANT_1658 = (std::int16_t) 1658,
            MILLI_G_FORCE = (std::int16_t) 1659 /* mg */,                                          UNITCONSTANT_1659 = (std::int16_t) 1659,
            MICRO_G_FORCE = (std::int16_t) 1660 /* ug */,                                          UNITCONSTANT_1660 = (std::int16_t) 1660,
            BYTE = (std::int16_t) 1661 /* B */,                                                    UNITCONSTANT_1661 = (std::int16_t) 1661,
            KILOBYTE = (std::int16_t) 1662 /* kB */,                                               UNITCONSTANT_1662 = (std::int16_t) 1662,
            MEGABYTE = (std::int16_t) 1663 /* MB */,                                               UNITCONSTANT_1663 = (std::int16_t) 1663,
            GIGABYTE = (std::int16_t) 1664 /* GB */,                                               UNITCONSTANT_1664 = (std::int16_t) 1664,
            TERABYTE = (std::int16_t) 1665 /* TB */,                                               UNITCONSTANT_1665 = (std::int16_t) 1665,
            KIBIBYTE = (std::int16_t) 1666 /* KiB */,                                              UNITCONSTANT_1666 = (std::int16_t) 1666,
            MEBIBYTE = (std::int16_t) 1667 /* MiB */,                                              UNITCONSTANT_1667 = (std::int16_t) 1667,
            GIBIBYTE = (std::int16_t) 1668 /* GiB */,                                              UNITCONSTANT_1668 = (std::int16_t) 1668,
            TEBIBYTE = (std::int16_t) 1669 /* TiB */,                                              UNITCONSTANT_1669 = (std::int16_t) 1669,
            METER_PER_SECOND_CUBED = (std::int16_t) 1670,                                          UNITCONSTANT_1670 = (std::int16_t) 1670,
            NANOSIEMENS_PER_METER = (std::int16_t) 1671 /* m/s3 */,                                UNITCONSTANT_1671 = (std::int16_t) 1671,
            METER_OF_WATER = (std::int16_t) 1672 /* nS/m  */,                                      UNITCONSTANT_1672 = (std::int16_t) 1672,
            METER_OF_WATER_AT_4_C = (std::int16_t) 1673 /*  mH2O  */,                              UNITCONSTANT_1673 = (std::int16_t) 1673,
            METER_OF_WATER_AT_68_F = (std::int16_t) 1674 /*  mH2O 4C */,                           UNITCONSTANT_1674 = (std::int16_t) 1674,
            RESERVED_1675 = (std::int16_t) 1675 /*  mH2O 68F */,                                   UNITCONSTANT_1675 = (std::int16_t) 1675,
            RESERVED_1994 = (std::int16_t) 1994,                                                   UNITCONSTANT_1994 = (std::int16_t) 1994,
            TEXTUAL_UNIT_DEFINITION = (std::int16_t) 1995,                                         UNITCONSTANT_1995 = (std::int16_t) 1995,
            NOT_USED = (std::int16_t) 1996,                                                        UNITCONSTANT_1996 = (std::int16_t) 1996,
            NONE = (std::int16_t) 1997,                                                            UNITCONSTANT_1997 = (std::int16_t) 1997,
            UNKNOWN = (std::int16_t) 1998,                                                         UNITCONSTANT_1998 = (std::int16_t) 1998,
            SPECIAL = (std::int16_t) 1999,                                                         UNITCONSTANT_1999 = (std::int16_t) 1999,
        };

        /**
         * @brief Default C'Tor; sets UnitCode to none
         */
        UnitCode();
        UnitCode(const UnitCode& other);
        UnitCode(const UnitCodeName& unit);
        UnitCode(const std::int16_t& unit);

        ~UnitCode();

        /**
         * @brief Allow comparison with unitcode or unitcode name, i.e. `== mtp::UnitCode::Ohm`
         */
        bool operator==(const UnitCode& rhs) const;
        bool operator==(const UnitCodeName& rhs) const;

        /**
         * @brief Numeric comparison based on unit code integer value; allows use of unitcode as keys in collections/maps/sets
         */
        bool operator>(const UnitCode& rhs) const;
        bool operator>(const UnitCodeName& rhs) const;

        /**
         * @brief Inequality derived from ==
         */
        bool operator!=(const UnitCode& rhs) const;
        bool operator!=(const UnitCodeName& rhs) const;

        /**
         * @brief Assigns unit code value of rhs to this UniCode
         */
        UnitCode& operator=(const UnitCode& rhs);
        UnitCode& operator=(const UnitCodeName& rhs);

        /**
         * @brief Checks rhs integer value for validity/coresponance with unit code names; assigns INVALID if no match is found
         * @details This essential type-check allows using UnitCodes safely - i.e. it is also used in conversions where the
         *          SDK returns a guaranteed valid unitcode that (for the VDI/VDE/NAMUR 2658) is only encoded as integer.
         */
        UnitCode& operator=(const std::int16_t& rhs);

        /**
         * @brief Permits use of assigned unit value as integer
         */
        operator std::int16_t() const;
    };
}
#endif// CONTROLENGINE_NATIVE_UNITS_HPP
