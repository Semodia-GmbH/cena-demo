# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS semodia_controlengine::controlengine_packed_static semodia_controlengine::controlengine semodia_controlengine::dataio semodia_controlengine::osal semodia_controlengine::locking semodia_controlengine::tasking semodia_controlengine::timing semodia_controlengine::logging semodia_controlengine::util semodia_controlengine::statemachine semodia_controlengine::computedvalues semodia_controlengine::model semodia_controlengine::modelsemantics semodia_controlengine::mtp semodia_controlengine::reflection semodia_controlengine::opcua semodia_controlengine::mbedcrypto semodia_controlengine::open62541_v1.3.11 semodia_controlengine::open62541_v1.3.11_static semodia_controlengine::mbedcrypto_static)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target semodia_controlengine::controlengine_packed_static
add_library(semodia_controlengine::controlengine_packed_static STATIC IMPORTED)

set_target_properties(semodia_controlengine::controlengine_packed_static PROPERTIES
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::controlengine;semodia_controlengine::dataio;semodia_controlengine::osal;semodia_controlengine::locking;semodia_controlengine::tasking;semodia_controlengine::timing;semodia_controlengine::logging;semodia_controlengine::util;semodia_controlengine::statemachine;semodia_controlengine::computedvalues;semodia_controlengine::model;semodia_controlengine::modelsemantics;semodia_controlengine::mtp;semodia_controlengine::reflection;semodia_controlengine::opcua;semodia_controlengine::open62541_v1.3.11_static"
  INTERFACE_LINK_OPTIONS "-static;-static-libgcc;-static-libstdc++"
)

# Create imported target semodia_controlengine::controlengine
add_library(semodia_controlengine::controlengine INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::controlengine PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/code.gen/"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::dataio;semodia_controlengine::osal;semodia_controlengine::util;semodia_controlengine::model;semodia_controlengine::reflection"
)

# Create imported target semodia_controlengine::dataio
add_library(semodia_controlengine::dataio INTERFACE IMPORTED)

# Create imported target semodia_controlengine::osal
add_library(semodia_controlengine::osal INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::osal PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "stdc++fs;semodia_controlengine::locking;semodia_controlengine::tasking;semodia_controlengine::logging;semodia_controlengine::timing"
)

# Create imported target semodia_controlengine::locking
add_library(semodia_controlengine::locking INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::locking PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target semodia_controlengine::tasking
add_library(semodia_controlengine::tasking INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::tasking PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::locking;semodia_controlengine::timing"
)

# Create imported target semodia_controlengine::timing
add_library(semodia_controlengine::timing INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::timing PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target semodia_controlengine::logging
add_library(semodia_controlengine::logging INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::logging PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::locking;semodia_controlengine::tasking"
)

# Create imported target semodia_controlengine::util
add_library(semodia_controlengine::util INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::util PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::statemachine;semodia_controlengine::computedvalues"
)

# Create imported target semodia_controlengine::statemachine
add_library(semodia_controlengine::statemachine INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::statemachine PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target semodia_controlengine::computedvalues
add_library(semodia_controlengine::computedvalues INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::computedvalues PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target semodia_controlengine::model
add_library(semodia_controlengine::model INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::model PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::osal;semodia_controlengine::modelsemantics;semodia_controlengine::mtp"
)

# Create imported target semodia_controlengine::modelsemantics
add_library(semodia_controlengine::modelsemantics INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::modelsemantics PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::locking"
)

# Create imported target semodia_controlengine::mtp
add_library(semodia_controlengine::mtp INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::mtp PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/code.gen"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::osal;semodia_controlengine::util;semodia_controlengine::modelsemantics"
)

# Create imported target semodia_controlengine::reflection
add_library(semodia_controlengine::reflection INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::reflection PROPERTIES
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::opcua"
)

# Create imported target semodia_controlengine::opcua
add_library(semodia_controlengine::opcua INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::opcua PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::osal;semodia_controlengine::mbedcrypto;semodia_controlengine::open62541_v1.3.11"
)

# Create imported target semodia_controlengine::mbedcrypto
add_library(semodia_controlengine::mbedcrypto INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::mbedcrypto PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target semodia_controlengine::open62541_v1.3.11
add_library(semodia_controlengine::open62541_v1.3.11 INTERFACE IMPORTED)

set_target_properties(semodia_controlengine::open62541_v1.3.11 PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include/opcua/open62541/v1.3.11"
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::mbedcrypto"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "include/opcua/open62541/v1.3.11"
)

# Create imported target semodia_controlengine::open62541_v1.3.11_static
add_library(semodia_controlengine::open62541_v1.3.11_static STATIC IMPORTED)

set_target_properties(semodia_controlengine::open62541_v1.3.11_static PROPERTIES
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::open62541_v1.3.11;semodia_controlengine::mbedcrypto_static"
)

# Create imported target semodia_controlengine::mbedcrypto_static
add_library(semodia_controlengine::mbedcrypto_static STATIC IMPORTED)

set_target_properties(semodia_controlengine::mbedcrypto_static PROPERTIES
  INTERFACE_LINK_LIBRARIES "semodia_controlengine::mbedcrypto"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/semodia_controlengineConfig-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
